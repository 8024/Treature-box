[
    {
        "title": "查找学生信息",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "“臭味相投”——这是我们描述朋友时喜欢用的词汇。两个人是朋友通常意味着他们存在着许多共同的兴趣。然而作为一个宅男，你发现自己与他人相互了解的机会并不太多。幸运的是，你意外得到了一份北大图书馆的图书借阅记录，于是你挑灯熬夜地编程，想从中发现潜在的朋友。 ? ? 首先你对借阅记录进行了一番整理，把N个读者依次编号为1,2,…,N，把M本书依次编号为1,2,…,M。同时，按照“臭味相投”的原则，和你喜欢读同一本书的人，就是你的潜在朋友。你现在的任务是从这份借阅记录中计算出每个人有几个潜在朋友。"
        },
        "inputDescription": {
            "content": "多组测试数据。\n每个案例第一行两个整数N,M，2 <= N ，M<= 200。接下来有N行，第i(i = 1,2,…,N)行每一行有一个数，表示读者i-1最喜欢的图书的编号P(1<=P<=M)"
        },
        "outputDescription": {
            "content": "每个案例包括N行，每行一个数，第i行的数表示读者i有几个潜在朋友。如果i和任何人都没有共同喜欢的书，则输出“BeiJu”（即悲剧，^ ^）"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 5\n2\n3\n2\n1"
                },
                "output": {
                    "content": "1\nBeiJu\n1\nBeiJu"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 1
    },
    {
        "title": "7",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "一个正整数,如果它能被7整除,或者它的十进制表示法中某个位数上的数字为7, 则称其为与7相关的数.现求所有小于等于n(n<100)的与7无关的正整数的平方和。"
        },
        "inputDescription": {
            "content": "案例可能有多组。对于每个测试案例输入为一行,正整数n,(n<100)"
        },
        "outputDescription": {
            "content": "对于每个测试案例输出一行，输出小于等于n的与7无关的正整数的平方和。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "21"
                },
                "output": {
                    "content": "2336"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 2
    },
    {
        "title": "I Wanna Go Home",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "The country is facing a terrible civil war----cities in the country are divided into two parts supporting different leaders. As a merchant, Mr. M does not pay attention to politics but he actually knows the severe situation, and your task is to help him reach home as soon as possible. ? ? \"For the sake of safety,\", said Mr.M, \"your route should contain at most 1 road which connects two cities of different camp.\" ? ? Would you please tell Mr. M at least how long will it take to reach his sweet home?"
        },
        "inputDescription": {
            "content": "The input contains multiple test cases.\n    The first line of each case is an integer N (2<=N<=600), representing the number of cities in the country.\n    The second line contains one integer M (0<=M<=10000), which is the number of roads.\n    The following M lines are the information of the roads. Each line contains three integers A, B and T, which means the road between city A and city B will cost time T. T is in the range of [1,500].\n    Next part contains N integers, which are either 1 or 2. The i-th integer shows the supporting leader of city i. \n    To simplify the problem, we assume that Mr. M starts from city 1 and his target is city 2. City 1 always supports leader 1 while city 2 is at the same side of leader 2. \n    Note that all roads are bidirectional and there is at most 1 road between two cities.\nInput is ended with a case of N=0."
        },
        "outputDescription": {
            "content": "For each test case, output one integer representing the minimum time to reach home.\n    If it is impossible to reach home according to Mr. M's demands, output -1 instead."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n1\n1 2 100\n1 2\n3\n3\n1 2 100\n1 3 40\n2 3 50\n1 2 1\n5\n5\n3 1 200\n5 3 150\n2 5 160\n4 3 170\n4 2 170\n1 2 2 2 1\n0"
                },
                "output": {
                    "content": "100\n90\n540"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 3
    },
    {
        "title": "W's Cipher",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Weird Wally's Wireless Widgets, Inc. manufactures an eclectic assortment of small, wireless, network capable devices, ranging from dog collars, to pencils, to fishing bobbers. All these devices have very small memories. Encryption algorithms like Rijndael, the candidate for the Advanced Encryption Standard (AES) are demonstrably secure but they don't fit in such a tiny memory. In order to provide some security for transmissions to and from the devices, WWWW uses the following algorithm, which you are to implement. Encrypting a message requires three integer keys, k1, k2, and k3. The letters [a-i] form one group, [j-r] a second group, and everything else ([s-z] and underscore) the third group. Within each group the letters are rotated left by ki positions in the message. Each group is rotated independently of the other two. Decrypting the message means doing a right rotation by ki positions within each group. Consider the message the_quick_brown_fox encrypted with ki values of 2, 3 and 1. The encrypted string is _icuo_bfnwhoq_kxert. The figure below shows the decrypting right rotations for one character in each of the three character groups.,Looking at all the letters in the group [a-i] we see {i,c,b,f,h,e} appear at positions {2,3,7,8,11,17} within the encrypted message. After a right rotation of k1=2, these positions contain the letters {h,e,i,c,b,f}. The table below shows the intermediate strings that come from doing all the rotations in the first group, then all rotations in the second group, then all the rotations in the third group. Rotating letters in one group will not change any letters in any of the other groups.,All input strings contain only lowercase letters and underscores(_). Each string will be at most 80 characters long. The ki are all positive integers in the range 1-100."
        },
        "inputDescription": {
            "content": "Input consists of information for one or more encrypted messages. Each problem begins with one line containing k1, k2, and k3 followed by a line containing the encrypted message. The end of the input is signalled by a line with all key values of 0."
        },
        "outputDescription": {
            "content": "For each encrypted message, the output is a single line containing the decrypted string."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 3 1 _icuo_bfnwhoq_kxert 1 1 1 bcalmkyzx 3 7 4 wcb_mxfep_dorul_eov_qtkrhe_ozany_dgtoh_u_eji 2 4 3 cjvdksaltbmu 0 0 0"
                },
                "output": {
                    "content": "the_quick_brown_fox abcklmxyz the_quick_brown_fox_jumped_over_the_lazy_dog ajsbktcludmv"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 4
    },
    {
        "title": "Is It A Tree?",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties. There is exactly one node, called the root, to which no directed edges point. Every node except the root has exactly one edge pointing to it. There is a unique sequence of directed edges from the root to each node. For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not.,In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not."
        },
        "inputDescription": {
            "content": "The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero and less than 10000."
        },
        "outputDescription": {
            "content": "For each test case display the line \"Case k is a tree.\" or the line \"Case k is not a tree.\", where k corresponds to the test case number (they are sequentially numbered starting with 1)."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6 8  5 3  5 2  6 4\n5 6  0 0\n\n8 1  7 3  6 2  8 9  7 5\n7 4  7 8  7 6  0 0\n\n3 8  6 8  6 4\n5 3  5 6  5 2  0 0\n-1 -1"
                },
                "output": {
                    "content": "Case 1 is a tree.\nCase 2 is a tree.\nCase 3 is not a tree."
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 5
    },
    {
        "title": "Candy Sharing Game",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "A number of students sit in a circle facing their teacher in the center. Each student initially has an number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy. Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with."
        },
        "inputDescription": {
            "content": "The input may describe more than one game. For each game, the input begins with the number N of students,followed by N candy counts for the children counter-clockwise around the circle.  Each input number is on a line by itself."
        },
        "outputDescription": {
            "content": "For each game, output the number of rounds of the game followed by the amount of candy each child ends up with,both on one line. \n\nThe game ends in a finite number of steps because:\n1. The maximum candy count can never increase.\n2. The minimum candy count can never decrease.\n3. No one with more than the minimum amount will ever decrease to the minimum.\n4. If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n36\n2\n2\n2\n2\n2"
                },
                "output": {
                    "content": "15 14"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 6
    },
    {
        "title": "False coin",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "The \"Gold Bar\"bank received information from reliable sources that in their last group of N coins exactly one coin is false and differs in weight from other coins (while all other coins are equal in weight). After the economic crisis they have only a simple balance available (like one in the picture). Using this balance, one is able to determine if the weight of objects in the left pan is less than, greater than, or equal to the weight of objects in the right pan. In order to detect the false coin the bank employees numbered all coins by the integers from 1 to N, thus assigning each coin a unique integer identifier. After that they began to weight various groups of coins by placing equal numbers of coins in the left pan and in the right pan. The identifiers of coins and the results of the weightings were carefully recorded. You are to write a program that will help the bank employees to determine the identifier of the false coin using the results of these weightings."
        },
        "inputDescription": {
            "content": "The first line of the input file contains two integers N and K, separated by spaces, where N is the number of coins (2<=N<=1000 ) and K is the number of weightings fulfilled (1<=K<=100). The following 2K lines describe all weightings. Two consecutive lines describe each weighting. The first of them starts with a number Pi (1<=Pi<=N/2), representing the number of coins placed in the left and in the right pans, followed by Pi identifiers of coins placed in the left pan and Pi identifiers of coins placed in the right pan. All numbers are separated by spaces. The second line contains one of the following characters: '<', '>', or '='. It represents the result of the weighting:\n'<' means that the weight of coins in the left pan is less than the weight of coins in the right pan,\n'>' means that the weight of coins in the left pan is greater than the weight of coins in the right pan,\n'=' means that the weight of coins in the left pan is equal to the weight of coins in the right pan."
        },
        "outputDescription": {
            "content": "Write to the output file the identifier of the false coin or 0, if it cannot be found by the results of the given weightings."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 3\n2 1 2 3 4\n<\n1 1 4\n=\n1 2 5\n="
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 7
    },
    {
        "title": "skew数",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在 skew binary 表示中，第 k 位的值 x[k] 表示 x[k]×(2^(k+1)-1)。每个位上的可能数字是 0 或 1，最后面一个非零位可以是 2，例如，10120(skew) = 1×(2^5-1) + 0×(2^4-1) + 1×(2^3-1) + 2×(2^2-1) + 0×(2^1-1) = 31 + 0 + 7 + 6 + 0 = 44。前十个 skew 数是 0、1、2、10、11、12、20、100、101、以及 102。"
        },
        "inputDescription": {
            "content": "输入包括多组数据，每组数据包含一个 skew 数。"
        },
        "outputDescription": {
            "content": "对应每一组数据，输出相应的十进制形式。结果不超过 2^31-1。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "10120\n200000000000000000000000000000\n10\n1000000000000000000000000000000\n11\n100\n11111000001110000101101102000"
                },
                "output": {
                    "content": "44\n2147483646\n3\n2147483647\n4\n7\n1041110737"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 8
    },
    {
        "title": "Jungle Roads",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all the roads in use now and the cost in aacms per month to maintain them. Of course there needs to be some way to get between all the villages on maintained roads, even if the route is not as short as before. The Chief Elder would like to tell the Council of Elders what would be the smallest amount they could spend in aacms per month to maintain roads that would connect all the villages. The villages are labeled A through I in the maps above. The map on the right shows the roads that could be maintained most cheaply, for 216 aacms per month. Your task is to write a program that will solve such problems.（ps:如果不是连通图的话，最后的结果输出不用包含不在连通图里的那些点）"
        },
        "inputDescription": {
            "content": "The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number n, which is the number of villages, 1 < n < 27, and the villages are labeled with the first n letters of the alphabet, capitalized. Each data set is completed with n-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number, k, of roads from this village to villages with labels later in the alphabet. If k is greater than 0, the line continues with data for each of the k roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above."
        },
        "outputDescription": {
            "content": "The output is one integer per line for each data set: the minimum cost in aacms per month to maintain a road system that connect all the villages. Caution: A brute force solution that examines every possible set of roads will not finish within the one minute time limit."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "9\nA 2 B 12 I 25\nB 3 C 10 H 40 I 8\nC 2 D 18 G 55\nD 1 E 44\nE 2 F 60 G 38\nF 0\nG 1 H 35\nH 1 I 35\n3\nA 2 B 10 C 40\nB 1 C 20\n0"
                },
                "output": {
                    "content": "216\n30"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 9
    },
    {
        "title": "Counterfeit Dollar",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins. ??? Happily, Sally has a friend who loans her a very accurate balance scale. The friend will permit Sally three weighings to find the counterfeit coin. For instance, if Sally weighs two coins against each other and the scales balance then she knows these two coins are true. Now if Sally weighs one of the true coins against a third coin and the scales do not balance then Sally knows the third coin is counterfeit and she can tell whether it is light or heavy depending on whether the balance on which it is placed goes up or down, respectively. ??? By choosing her weighings carefully, Sally is able to ensure that she will find the counterfeit coin with exactly three weighings."
        },
        "inputDescription": {
            "content": ". Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A--L. Information on a weighing will be given by two strings of letters and then one of the words ``up'', ``down'', or ``even''. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even."
        },
        "outputDescription": {
            "content": "For each case, the output will identify the counterfeit coin by its letter and tell whether it is heavy or light. The solution will always be uniquely determined."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ABCD EFGH even \nABCI EFJK up \nABIJ EFGH even"
                },
                "output": {
                    "content": "K is the counterfeit coin and it is light."
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 10
    },
    {
        "title": "Mileage Bank",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Mileage program of ACM (Airline of Charming Merlion) is really nice for the travelers flying frequently. Once you complete a flight with ACM, you can earn ACMPerk miles in your ACM Mileage Bank depended on mileage you actual fly. In addition, you can use the ACMPerk mileage in your Mileage Bank to exchange free flight ticket of ACM in future. The following table helps you calculate how many ACMPerk miles you can earn when you fly on ACM. When you fly ACM Class Code You'll earn First Class F Actual mileage + 100% mileage Bonus Business Class B Actual mileage + 50% mileage Bonus Economy Class Y 1-500 miles 500 miles 500+ miles Actual mileage It's shown that your ACMPerk mileage consists of two parts. One is your actual flight mileage (the minimum ACMPerk mileage for Economy Class for one flight is 500 miles), the other is the mileage bonus (its accuracy is up to 1 mile) when you fly in Business Class and First Class. For example, you can earn 1329 ACMPerk miles, 1994 ACMPerk miles and 2658 ACMPerk miles for Y, B or F class respectively for the fly from Beijing to Tokyo (the actual mileage between Beijing and Tokyo is 1329 miles). When you fly from Shanghai to Wuhan, you can earn ACMPerk 500 miles for economy class and ACMPerk 650 miles for business class (the actual mileage between Shanghai and Wuhan is 433 miles). Your task is to help ACM build a program for automatic calculation of ACMPerk mileage."
        },
        "inputDescription": {
            "content": "he input file contains several data cases. Each case has many flight records, each per line. The flight record is in the following format:\nOriginalCity DistanceCity ActualMiles ClassCode\nEach case ends with a line of one zero."
        },
        "outputDescription": {
            "content": "Output the summary of ACMPerk mileages for each test case, one per line.\n\nWhen calculate bonus, be sure you rounded x.5 up to x+1"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "Beijing Tokyo 1329 F\nShanghai Wuhan 433 Y\n0"
                },
                "output": {
                    "content": "3158"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 11
    },
    {
        "title": "数制转换",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求任意两个不同进制非负整数的转换（2进制～16进制），所给整数在long所能表达的范围之内。 ??? 不同进制的表示符号为（0，1，...，9，a，b，...，f）或者（0，1，...，9，A，B，...，F）。"
        },
        "inputDescription": {
            "content": "输入只有一行，包含三个整数a，n，b。a表示其后的n 是a进制整数，b表示欲将a进制整数n转换成b进制整数。a，b是十进制整数，2 =< a，b <= 16。\n    数据可能存在包含前导零的情况。"
        },
        "outputDescription": {
            "content": "可能有多组测试数据，对于每组数据，输出包含一行，该行有一个整数为转换后的b进制数。输出时字母符号全部用大写表示，即（0，1，...，9，A，B，...，F）。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "15 Aab3 7"
                },
                "output": {
                    "content": "210306"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 12
    },
    {
        "title": "Financial Management",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Larry graduated this year and finally has a job. He's making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what's been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance."
        },
        "inputDescription": {
            "content": "Each case will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included."
        },
        "outputDescription": {
            "content": "For each case, the output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "100.00\n489.12\n12454.12\n1234.10\n823.05\n109.20\n5.27\n1542.25\n839.18\n83.99\n1295.01\n1.75"
                },
                "output": {
                    "content": "$1,581.42 "
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 13
    },
    {
        "title": "Primary Arithmetic",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Children are taught to add multi-digit numbers from right-to-left one digit at a time. Many find the \"carry\" operation - in which a 1 is carried from one digit position to be added to the next - to be a significant challenge. Your job is to count the number of carry operations for each of a set of addition problems so that educators may assess their difficulty."
        },
        "inputDescription": {
            "content": "Each line of input contains two unsigned integers less than 10 digits."
        },
        "outputDescription": {
            "content": "For each line of input except the last you should compute and print the number of carry operations that would result from adding the two numbers, in the format shown below."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "123 456"
                },
                "output": {
                    "content": "NO carry operation."
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 14
    },
    {
        "title": "Integer Inquiry",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "One of the first users of BIT's new supercomputer was Chip Diller. ??? He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. ??? \"This supercomputer is great,'' remarked Chip. ??? \"I only wish Timothy were here to see these results.'' ??? (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.)"
        },
        "inputDescription": {
            "content": "The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative).\n\nThe final input line will contain a single zero on a line by itself.\n\n注意输入数据中，VeryLongInteger 可能有前导0"
        },
        "outputDescription": {
            "content": "Your program should output the sum of the VeryLongIntegers given in the input."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "123456789012345678901234567890\n123456789012345678901234567890\n123456789012345678901234567890\n0"
                },
                "output": {
                    "content": "3.70E+29"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 15
    },
    {
        "title": "Number Steps",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Starting from point (0,0) on a plane, we have written all non-negative integers 0,1,2, ... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.,You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...5000."
        },
        "inputDescription": {
            "content": "each line, there is x, and y representing the coordinates (x, y) of a point."
        },
        "outputDescription": {
            "content": "For each point in the input, write the number written at that point or write No Number if there is none."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 2"
                },
                "output": {
                    "content": "6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 16
    },
    {
        "title": "加减乘除",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "根据输入的运算符对输入的整数进行简单的整数运算。 运算符只会是加+、减-、乘*、除/、求余%、阶乘！六个运算符之一。 输出运算的结果，如果出现除数为零，则输出“error”,如果求余运算的第二个运算数为0，也输出“error”。"
        },
        "inputDescription": {
            "content": "输入为一行。先输入第一个整数，空格输入运算符，然后再空格输入第二个整数，回车结束本次输入。\n如果运算符为阶乘！符号，则不输入第二个整数，直接回车结束本次输入。"
        },
        "outputDescription": {
            "content": "可能有多组测试数据，对于每组数据，\n输出一行。输出对输入的两个（或一个）数，根据输入的运算符计算的结果，或者“error”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "12 + 34\n54 - 25\n3 * 6\n45 / 0\n5 !\n34 % 0"
                },
                "output": {
                    "content": "46\n29\n18\nerror\n120\nerror"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 17
    },
    {
        "title": "括号匹配问题",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在某个字符串（长度不超过100）中有左括号、右括号和大小写字母；规定（与常见的算数式子一样）任何一个左括号都从内到外与在它右边且距离最近的右括号匹配。写一个程序，找到无法匹配的左括号和右括号，输出原来字符串，并在下一行标出不能匹配的括号。不能匹配的左括号用\"$\"标注,不能匹配的右括号用\"?\"标注。"
        },
        "inputDescription": {
            "content": "输入包括多组数据，每组数据一行，包含一个字符串，只包含左右括号和大小写字母，字符串长度不超过100。\n注意：cin.getline(str,100)最多只能输入99个字符！"
        },
        "outputDescription": {
            "content": "对每组输出数据，输出两行，第一行包含原始输入字符，第二行由\"$\",\"?\"和空格组成，\"$\"和\"?\"表示与之对应的左括号和右括号不能匹配。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "bge)))))))))\n((IIII))))))\n()()()()(uuu\n))))UUUU((()"
                },
                "output": {
                    "content": "bge)))))))))\n   ?????????\n((IIII))))))\n        ????\n()()()()(uuu\n        $   \n))))UUUU((()\n????    $$"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 18
    },
    {
        "title": "Flipping Pancake",
        "sourceUniversity": "北京大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "We start with a stack n of pancakes of distinct sizes. The problem is to convert the stack to one in which the pancakes are in size order with the smallest on the top and the largest on the bottom. To do this, we are allowed to flip the top k pancakes over as a unit (so the k-th pancake is now on top and the pancake previously on top is now in the k-th position).,For example: This problem is to write a program, which finds a sequence of at most (2n - 3) flips, which converts a given stack of pancakes to a sorted stack."
        },
        "inputDescription": {
            "content": "Each line of the input gives a separate data set as a sequence of numbers separated by spaces. The first number on each line gives the number, N, of pancakes in the data set. The input ends when N is 0 (zero) with no other data on the line. The remainder of the data set are the numbers 1 through N in some order giving the initial pancake stack.\n\nThe numbers indicate the relative sizes of the pancakes. N will be, at most, 30."
        },
        "outputDescription": {
            "content": "For each data set, the output is a single-space separated sequence of numbers on a line. The first number on each line, K, gives the number of flips required to sort the pancakes. This number is followed by a sequence of K numbers, each of which gives the number of pancakes to flip on the corresponding sorting step. There may be several correct solutions for some datasets. For instance 3 3 2 3 is also a solution to the first problem below."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 2 1\n6 2 5 6 1 3 4\n0"
                },
                "output": {
                    "content": "1 2\n4 3 6 4 2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 19
    },
    {
        "title": "质因数个数",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求正整数N(N>1)的质因数的个数。 相同的质因数需要重复计算。如120=2*2*2*3*5，共有5个质因数。"
        },
        "inputDescription": {
            "content": "可能有多组测试数据，每组测试数据的输入是一个正整数N，(1<N<10^9)。"
        },
        "outputDescription": {
            "content": "对于每组数据，输出N的质因数的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "120"
                },
                "output": {
                    "content": "5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 20
    },
    {
        "title": "求root(N, k)",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "N<k时，root(N,k) = N，否则，root(N,k) = root(N',k)。N'为N的k进制表示的各位数字之和。输入x,y,k，输出root(x^y,k)的值 (这里^为乘方，不是异或)，2=<k<=16，0<x,y<2000000000，有一半的测试点里 x^y 会溢出int的范围(>=2000000000)"
        },
        "inputDescription": {
            "content": "每组测试数据包括一行，x(0<x<2000000000), y(0<y<2000000000), k(2<=k<=16)"
        },
        "outputDescription": {
            "content": "输入可能有多组数据，对于每一组数据，root(x^y, k)的值"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 4 10"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 21
    },
    {
        "title": "特殊算法",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "写个算法，对2个小于1000000000的输入，求结果。 特殊乘法举例：123 * 45 = 1*4 +1*5 +2*4 +2*5 +3*4+3*5"
        },
        "inputDescription": {
            "content": "两个小于1000000000的数"
        },
        "outputDescription": {
            "content": "输入可能有多组数据，对于每一组数据，输出Input中的两个数按照题目要求的方法进行运算后得到的结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "123 45"
                },
                "output": {
                    "content": "54"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 22
    },
    {
        "title": "今年的第几天",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入年、月、日，计算该天是本年的第几天。"
        },
        "inputDescription": {
            "content": "包括三个整数年(1<=Y<=3000)、月(1<=M<=12)、日(1<=D<=31)。"
        },
        "outputDescription": {
            "content": "输入可能有多组测试数据，对于每一组测试数据，\n输出一个整数，代表Input中的年、月、日对应本年的第几天。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1990 9 20\n2000 5 1"
                },
                "output": {
                    "content": "263\n122"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 23
    },
    {
        "title": "十进制和二进制",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对于一个十进制数A，将A转换为二进制数，然后按位逆序排列，再转换为十进制数B，我们称B为A的二进制逆序数。 ? ? 例如对于十进制数173，它的二进制形式为10101101，逆序排列得到10110101，其十进制数为181，181即为173的二进制逆序数。"
        },
        "inputDescription": {
            "content": "一个1000位(即10^999)以内的十进制数。"
        },
        "outputDescription": {
            "content": "输入的十进制数的二进制逆序数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "173"
                },
                "output": {
                    "content": "181"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 24
    },
    {
        "title": "众数",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "某个序列有n个正整数，每个正整数都是m位数。某科研人员想统计该序列各个位的“众数”。,第i（1<=i<=m）位的众数是指，n个正整数的第i位出现次数最多的最小数字。,最低位（个位）是第1位，最高位是第m位。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n输入的第一行包含两个正整数n,m，保证n<=10^5, m <= 6。\n输入的第二行包含n个正整数。\n同行相邻两个整数用一个空格隔开。"
        },
        "outputDescription": {
            "content": "输出到标准输出。\n输出共m行，每行一个整数，第i行表示第i位的众数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 1\n1 2 0"
                },
                "output": {
                    "content": "0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 25
    },
    {
        "title": "升次方",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "“众所周知，世界的本质是电。”,你在上课的时候听到了这句话，看到了讲台上的wnn正在施展她的“升次方”。,wnn的升次方是这样进行的：选取两个正整数a,m，计算出n=am。,由于你之前没有听课，现在你只知道n和m的值，你需要计算出a的值。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n输入的包括一行两个正整数n,m，以空格隔开，含义如题目描述。\n对于所有的输入数据，保证0<=lg(n)<=7*10^4，2<=m<=5，且存在正整数a使a^m=n。\n其中，lg表示以10为底的对数。"
        },
        "outputDescription": {
            "content": "输出到标准输出。\n输出一行一个正整数，表示winn选取的a的值。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 2"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 26
    },
    {
        "title": "论文",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小H为了完成一篇论文，一共要完成n个实验。其中第i个实验需要ai的时间去完成。,小H可以同时进行若干实验，但存在一些实验，只有当它的若干前置实验完成时，才能开始进行该实验。,同时我们认为小H在一个实验的前置实验都完成时，就能马上开始该实验。,为了让小H尽快完成论文，需要知道在最优的情况下，最后一个完成的实验什么时候完成？,小H还想知道，在保证最后一个实验尽快完成的情况下（即保证上一问的答案不变），他想知道每个实验最晚可以什么时候开始。,设第i个实验最早可能的开始时间为fi，不影响最后一个实验完成时间的最晚开始时间为gi，请你回答,除以10^9+7所得的余数。,题目保证有解。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n第一行输入一个整数n，m。\n第二行输入n个正整数，a1,a2,.....an,描述每个实验完成所需要的时间。\n接下来读入m行，每行读入两个整数u,v，表示编号为u的实验是编号为v的实验的前置实验。\n对于所有的输入数据，都满足1<=n<=10^5,1<=m<=5*10^5,1<=ai<=10^6。"
        },
        "outputDescription": {
            "content": "输出到标准输出。\n第一行输出一个整数表示最晚完成的实验的时间。\n第二行输出一个整数表示除以10^9+7所得的余数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7 5\n11 20 17 10 11 17 17\n5 4\n6 1\n7 3\n2 4\n2 1"
                },
                "output": {
                    "content": "3 4\n7840"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 27
    },
    {
        "title": "统计次数",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定两个正整数?n?和?k(1≤k≤9)，求从?1?到?n?这?n?个正整数的十进制表示中?k?出现的次数。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n输入的第一行包含两个正整数 n 和 k，保证 n≤10^6 和 1≤k≤9。"
        },
        "outputDescription": {
            "content": "输出到标准输出。\n输出一个整数，表示答案。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "12 1"
                },
                "output": {
                    "content": "5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 28
    },
    {
        "title": "图",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个有?n?个点，m?条边的有向图。图中第?i?个点的价值是?vi，每条边有一个代价?z，不同的边代价可能不一样。,一共有?q?个询问，每次询问包含两个数字?u,c，表示询问从?u?点出发，经过代价总和不超过?c?的边所能到达的点的价值总和的最大值。,如果一个点被多次经过，那么其价值要计算多次。初始节点的价值也要计算进去。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n\n输入的第一行包含三个由空格隔开的正整数 n,m,q，保证 N≤2,000 和 M≤8,000,Q≤10^5。\n\n接下来的一行包括 n 个由空格隔开的非负整数 vi 表示编号从小到大所有点的价值，保证 vi≤10^4。\n\n接下来的 m 行每行包含三个由空格隔开的正整数 x,y,z，保证 1≤x,y≤n 和 1≤z≤30，表示存在一条从 x 到 y 代价为 z 的有向边。\n\n接下来的 q 行每行包含两个由空格隔开的非负整数 u,c，保证 1≤u≤n 和 0≤c≤800。"
        },
        "outputDescription": {
            "content": "输出到标准输出。\n\n对于每次询问输出一个数，表示相应的答案。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 4 2\n3 2 3 4\n1 2 1\n2 3 1\n3 2 2\n3 4 1\n2 6\n3 2"
                },
                "output": {
                    "content": "14\n7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 29
    },
    {
        "title": "等差数列",
        "sourceUniversity": "清华大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有一个特殊的?n?行?m?列的矩阵?Aij(1≤i≤n,1≤j≤m)，每个元素都是正整数，每一行和每一列都是独立的等差数列。在某一次故障中，这个矩阵的某些元素的真实值丢失了，被重置为?0。现在需要你想办法恢复这些元素，并且按照行号和列号从小到大的顺序（行号为第一关键字，列号为第二关键字，从小到大）输出能够恢复的元素。"
        },
        "inputDescription": {
            "content": "从标准输入读入数据。\n\n输入的第一行包含两个正整数 n 和 m，保证 n≤10^3 和 m≤10^3。\n\n接下来 n 行，每行 m 个整数，表示整个矩阵，保证 1≤Aij≤10^9。如果 Aij 等于 0，表示真实值丢失的元素。"
        },
        "outputDescription": {
            "content": "输出若干行，表示所有能够恢复的元素。每行三个整数 i,j,x，表示 Aij 的真实值是 x。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 4\n1 2 0 0\n0 0 0 0\n3 0 0 0"
                },
                "output": {
                    "content": "1 3 3\n1 4 4\n2 1 2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 30
    },
    {
        "title": "String Matching",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Finding all occurrences of a pattern in a text is a problem that arises frequently in text-editing programs. ??? Typically,the text is a document being edited,and the pattern searched for is?a particular word supplied by the user.?? ??? We assume that the text is an array T[1..n] of length n and that the pattern is an array P[1..m] of length m<=n.We further assume that the elements of P and? T are all alphabets(∑={a,b...,z}).The character arrays P and T are often called strings of characters.?? ??? We say that pattern P occurs with shift s in the text T if 0<=s<=n and T[s+1..s+m] = P[1..m](that is if T[s+j]=P[j],for 1<=j<=m).?? ??? If P occurs with shift s in T,then we call s a valid shift;otherwise,we calls a invalid shift.? ??? Your task is to calculate the number of vald shifts for the given text T and p attern P."
        },
        "inputDescription": {
            "content": "For each case, there are two strings T and P on a line,separated by a single space.You may assume both the length of T and P will not exceed 10^6."
        },
        "outputDescription": {
            "content": "You should output a number on a separate line,which indicates the number of valid shifts for the given text T and pattern P."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abababab abab"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 31
    },
    {
        "title": "Simple Sorting",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "You are given an unsorted array of integer numbers. Your task is to sort this array and kill possible duplicated elements occurring in it."
        },
        "inputDescription": {
            "content": "For each case, the first line of the input contains an integer number N representing the quantity of numbers in this array(1≤N≤1000). Next N lines contain N integer numbers(one number per each line) of the original array."
        },
        "outputDescription": {
            "content": "For each case ,outtput file should contain at most N numbers sorted in ascending order. Every number in the output file should occur only once."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n8 8 7 3 7 7"
                },
                "output": {
                    "content": "3 7 8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 32
    },
    {
        "title": "Old Bill",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Among grandfather's papers a bill was found. ??? 72 turkeys $_679_ ??? The first and the last digits of the number that obviously represented the total price of those turkeys are replaced here by blanks (denoted _), for they are faded and are illegible. What are the two faded digits and what was the price of one turkey? ??? We want to write a program that solves a general version of the above problem. ??? N turkeys $_XYZ_ ??? The total number of turkeys, N, is between 1 and 99, including both. The total price originally consisted of five digits, but we can see only the three digits in the middle. We assume that the first digit is nonzero, that the price of one turkeys is an integer number of dollars, and that all the turkeys cost the same price. ??? Given N, X, Y, and Z, write a program that guesses the two faded digits and the original price. In case that there is more than one candidate for the original price, the output should be the most expensive one. That is, the program is to report the two faded digits and the maximum price per turkey for the turkeys."
        },
        "inputDescription": {
            "content": "The first line of the input file contains an integer N (0<N<100), which represents the number of turkeys. In the following line, there are the three decimal digits X, Y, and Z., separated by a space, of the original price $_XYZ_."
        },
        "outputDescription": {
            "content": "For each case, output the two faded digits and the maximum price per turkey for the turkeys."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "72\n6 7 9\n5\n2 3 7\n78\n0 0 5"
                },
                "output": {
                    "content": "3 2 511\n9 5 18475\n0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 33
    },
    {
        "title": "Sum of Factorials",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "John von Neumann, b. Dec. 28, 1903, d. Feb. 8, 1957, was a Hungarian-American mathematician who made important contributions to the foundations of mathematics, logic, quantum physics, meteorology, science, computers, and game theory. He was noted for a phenomenal memory and the speed with which he absorbed ideas and solved problems. In 1925 he received a B.S. diploma in chemical engineering from Zurich Institute and in 1926 a Ph.D. in mathematics from the University of Budapest, His Ph.D. dissertation on set theory was an important contributions to the subject. ??? At the age of 20, von Neumann proposed a new definition of ordinal numbers that was universally adopted. While still in his twenties, he made many contributions in both pure and applied mathematics that established him as a mathematician of unusual depth. His Mathematical Foundation of Quantum Mechanics (1932) built a solid framework for the new scientific discipline. ??? During this time he also proved the mini-max theorem of GAME THEORY. He gradually expanded his work in game theory, and with coauthor Oskar Morgenstern he wrote Theory of Games and Economic Behavior (1944). ??? There are some numbers which can be expressed by the sum of factorials. For example 9, 9 = 1! + 2! + 3! . Dr. von Neumann was very interested in such numbers. So, he gives you a number n, and wants you to tell whether or not the number can be expressed by the sum of some factorials. Well, it is just a piece of case. For a given n, you will check if there are some xi, and let n equal to Σt (上标) i=1（下标） xi! (t≥1, xi≥0, xi = xj <==> i = j) ?????????? t ??? ?即 Σ? xi! (t≥1, xi≥0, xi = xj <==> i = j) ??????? ? i=1 ??? If the answer is yes, say \"YES\"; otherwise, print out \"NO\"."
        },
        "inputDescription": {
            "content": "You will get a non-negative integer n (n≤1,000,000) from input file."
        },
        "outputDescription": {
            "content": "For the n in the input file, you should print exactly one word (\"YES\" or \"NO\") in a single line. No extra spaces are allowed."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "9\n2"
                },
                "output": {
                    "content": "YES\nYES"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 34
    },
    {
        "title": "Powerful Calculator",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Today, facing the rapid development of business, SJTU recognizes that more powerful calculator should be studied, developed and appeared in future market shortly. SJTU now invites you attending such amazing research and development work. ??? In most business applications, the top three useful calculation operators are Addition (+), Subtraction (-) and Multiplication (×) between two given integers. Normally, you may think it is just a piece of cake. However, since some integers for calculation in business application may be very big, such as the GDP of the whole world, the calculator becomes harder to develop. ??? For example, if we have two integers 20 000 000 000 000 000 and 4 000 000 000 000 000, the exact results of addition, subtraction and multiplication are: ??? 20000000000000000 + 4000000000000000 = 24 000 000 000 000 000 ??? 20000000000000000 - 4000000000000000 = 16 000 000 000 000 000 ??? 20000000000000000 × 4000000000000000 = 80 000 000 000 000 000 000 000 000 000 000 ??? Note: SJTU prefers the exact format of the results rather than the float format or scientific remark format. For instance, we need \"24000000000000000\" rather than 2.4×10^16. ??? As a programmer in SJTU, your current task is to develop a program to obtain the exact results of the addition (a + b), subtraction (a - b) and multiplication (a × b) between two given integers a and b."
        },
        "inputDescription": {
            "content": "Each case consists of two separate lines where the first line gives the integer a and the second gives b (|a| <10^400 and |b| < 10^400)."
        },
        "outputDescription": {
            "content": "For each case, output three separate lines showing the exact results of addition (a + b), subtraction (a - b) and multiplication (a × b) of that case, one result per lines."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "20000000000000000\n4000000000000000"
                },
                "output": {
                    "content": "24000000000000000\n16000000000000000\n80000000000000000000000000000000"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 35
    },
    {
        "title": "2的幂次方",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Every positive number can be presented by the exponential form.For example, 137 = 2^7 + 2^3 + 2^0。 ??? Let's present a^b by the form a(b).Then 137 is presented by 2(7)+2(3)+2(0). Since 7 = 2^2 + 2 + 2^0 and 3 = 2 + 2^0 , 137 is finally presented by 2(2(2)+2 +2(0))+2(2+2(0))+2(0).? ? ??? Given a positive number n,your task is to present n with the exponential form?which only contains the digits 0 and 2."
        },
        "inputDescription": {
            "content": "For each case, the input file contains a positive integer n (n<=20000)."
        },
        "outputDescription": {
            "content": "For each case, you should output the exponential form of n an a single line.Note that,there should not be any additional white spaces in the line."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1315"
                },
                "output": {
                    "content": "2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 36
    },
    {
        "title": "Day of Week",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "We now use the Gregorian style of dating in Russia. The leap years are years with number divisible by 4 but not divisible by 100, or divisible by 400. For example, years 2004, 2180 and 2400 are leap. Years 2004, 2181 and 2300 are not leap. Your task is to write a program which will compute the day of week corresponding to a given date in the nearest past or in the future using today’s agreement about dating."
        },
        "inputDescription": {
            "content": "There is one single line contains the day number d, month name M and year number y(1000≤y≤3000). The month name is the corresponding English name starting from the capital letter."
        },
        "outputDescription": {
            "content": "Output a single line with the English name of the day of week corresponding to the date, starting from the capital letter. All other letters must be in lower case.\n\nMonth and Week name in Input/Output:\nJanuary, February, March, April, May, June, July, August, September, October, November, December\nSunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "9 October 2001\n14 October 2001"
                },
                "output": {
                    "content": "Tuesday\nSunday"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 37
    },
    {
        "title": "Zero-complexity Tran",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "You are given a sequence of integer numbers. Zero-complexity transposition of the sequence is the reverse of this sequence. Your task is to write a program that prints zero-complexity transposition of the given sequence."
        },
        "inputDescription": {
            "content": "For each case, the first line of the input file contains one integer n-length of the sequence (0 ＜ n ≤ 10 000). The second line contains n integers numbers-a1, a2, …, an (-1 000 000 000 000 000 ≤ ai ≤ 1 000 000 000 000 000)."
        },
        "outputDescription": {
            "content": "For each case, on the first line of the output file print the sequence in the reverse order."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n-3 4 6 -8 9"
                },
                "output": {
                    "content": "9 -8 6 4 -3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 38
    },
    {
        "title": "Prime Number",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Output the k-th prime number."
        },
        "inputDescription": {
            "content": "k≤10000"
        },
        "outputDescription": {
            "content": "The k-th prime number."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n7"
                },
                "output": {
                    "content": "5\n17"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 39
    },
    {
        "title": "图的连通分支数",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "该题的目的是要你统计图的连通分支数。"
        },
        "inputDescription": {
            "content": "每个输入文件包含若干行，每行两个整数i,j，表示节点i和j之间存在一条边。"
        },
        "outputDescription": {
            "content": "输出每个图的联通分支数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 4\n4 3\n5 5"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 40
    },
    {
        "title": "String to int",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个字符串，字符串前可能有很多空格，字符串由数字和各种字符组成，要求找到第一个数字。,若没有找到或者其值大于??上限，都返回??。"
        },
        "inputDescription": {
            "content": NaN
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2016\n000687CS01"
                },
                "output": {
                    "content": "2016\n687"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 41
    },
    {
        "title": "ZIG-ZAG",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "题意：,定义??序列为 增-减-增-... 或 减-增-减-...，就是变大与变小不断的切换,比如： 1 7 4 9 2 5,现给定一个长为??的数组，求其中最长的??序列的长度。,注意区分子串与子序列：子串要求是连续的一段，子序列不要求连续。"
        },
        "inputDescription": {
            "content": "第一行输入n，表示序列长度\n第二行出入序列"
        },
        "outputDescription": {
            "content": "输出结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n44\n6\n1 7 4 9 2 5"
                },
                "output": {
                    "content": "1\n6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 42
    },
    {
        "title": "Sum of Fibonacci",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "[公式],[公式],[公式],这三种情况，但不能拆解为：??，因为有两个相同的??。,现在问有多少种方式能表示??。"
        },
        "inputDescription": {
            "content": NaN
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n8"
                },
                "output": {
                    "content": "2\n3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 43
    },
    {
        "title": "上交2018 Problem A",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求n的阶乘末尾连续0的个数"
        },
        "inputDescription": {
            "content": "多组数据输入。\n输入一个整数n（n < 10^9）"
        },
        "outputDescription": {
            "content": "输出结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5"
                },
                "output": {
                    "content": "1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 44
    },
    {
        "title": "上交2018 Problem B",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求两序列的最长公共子串，要求不包含数字"
        },
        "inputDescription": {
            "content": "输入两个字符串"
        },
        "outputDescription": {
            "content": "输出答案"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "aa\nab\nab123abccff\nabcfac123"
                },
                "output": {
                    "content": "a\nabc"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 45
    },
    {
        "title": "上交2018 Problem C",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "棋盘遍历问题，一个棋子从左上角出发，问能否遍历整个棋盘一次再回到起点，不允许重复。,可以遍历输出Y，不能遍历输出N"
        },
        "inputDescription": {
            "content": "多组输入。\n输入棋盘大小N*M。\nN,M <= 10"
        },
        "outputDescription": {
            "content": "输出结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 2"
                },
                "output": {
                    "content": "N"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 46
    },
    {
        "title": "上交2019 Problem A",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出两个数字序列，求最长公共子序列（LCS）? ?保证一个序列中所有元素都不重复\n第一行给定一个n 为序列的长度\n第二第三行为两个序列\n其中??60% 的用例??n<=1000\n所有用例保证 n<= 1000000"
        },
        "inputDescription": {
            "content": NaN
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 2 3 4 5\n1 2 3 4 5\n5\n1 2 3 5 4\n1 2 3 4 5"
                },
                "output": {
                    "content": "5\n4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 47
    },
    {
        "title": "上交2019 Problem B",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出三个杯子的容量ABC ， 其中刚开始时C杯是满的，AB是空的。\n现在在保证不会有漏水的情况下进行如下操作：\n将一个杯子x的水倒到另一个杯子y中，如果x空了或者y满了就停止（满足其中一个条件才停下）\n现问C中水量有多少种可能性（A,B,C为非负整数）\n60% case A,B,C<=100\n100% case A,B,C<=4000"
        },
        "inputDescription": {
            "content": NaN
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "0 5 5\n2 2 4"
                },
                "output": {
                    "content": "2\n3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 48
    },
    {
        "title": "上交2019 Problem C",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一张带权无向完全图，设点的编号为1,2,3,4,5....n（以邻接矩阵的形式给出）\n计算依次拿走第i个点后，剩余所有点到其他点的最短距离之和的总和（具体请看例子）\n例子：\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0\nf1 = 2+2+2 = 6 // 拿走1号点 剩一个三角形，2号到3号距离为1,2号到4号距离为1 所以2号的最短距离之和为2 所以最后总共为6.\nf2 = 1+1 = 2// 在拿走1号点和2号点后 剩一条边， 所以是 1 + 1\nf3 = f4 = 0// 拿走1,2,3号点后??仅剩1个点??拿走所有点后为空。\n结果为 f1+f2+f3+f4 = 8\naii=0? ?0<aij<=10(i!=j aij为整数)\n60%??n<=100??\n100%??n<=500"
        },
        "inputDescription": {
            "content": "第一行为点的个数n，接下来有n行为邻接矩阵"
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n0 1 1 1\n1 0 1 1\n1 1 0 1\n1 1 1 0"
                },
                "output": {
                    "content": "8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 49
    },
    {
        "title": "最长公共子序列",
        "sourceUniversity": "上海交通大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出两个字符串序列，求最长公共子序列（LCS）?。（改编版，原题规定两字符串长度相等，且无重复元素。）"
        },
        "inputDescription": {
            "content": "多组数据输入。\n在一行分别输入两个字符串。(字符串长度<=1000)"
        },
        "outputDescription": {
            "content": "输出两个字符串的最长公共子序列的长度。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcde ace"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 50
    },
    {
        "title": "A + B 加强版",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "读入两个小于100的正整数A和B,计算A+B. 需要注意的是:A和B的每一位数字由对应的英文单词给出."
        },
        "inputDescription": {
            "content": "测试输入包含若干测试用例,每个测试用例占一行,格式为\"A + B =\",相邻两字符串有一个空格间隔.当A和B同时为0时输入结束,相应的结果不要输出."
        },
        "outputDescription": {
            "content": "对每个测试用例输出1行,即A+B的值."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "one + two =\nthree four + five six =\nzero seven + eight nine =\nzero + zero ="
                },
                "output": {
                    "content": "3\n90\n96"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 51
    },
    {
        "title": "又一版 A+B",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个不超过整型定义的非负10进制整数A和B(<=231-1)，输出A+B的m (1 < m <10)进制数。"
        },
        "inputDescription": {
            "content": "输入格式：测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。\n当m为0时输入结束。"
        },
        "outputDescription": {
            "content": "输出格式：每个测试用例的输出占一行，输出A+B的m进制数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8 1300 48\n2 1 7\n0"
                },
                "output": {
                    "content": "2504\n1000"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 52
    },
    {
        "title": "Head of a Gang",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "One way that the police finds the head of a gang is to check people's phone calls. If there is a phone call between A and B, we say that A and B is related. The weight of a relation is defined to be the total time length of all the phone calls made between the two persons. A \"Gang\" is a cluster of more than 2 persons who are related to each other with total relation weight being greater than a given threthold K. In each gang, the one with maximum total weight is the head. Now given a list of phone calls, you are supposed to find the gangs and the heads."
        },
        "inputDescription": {
            "content": "For each case, the first line contains two positive numbers N and K (both less than or equal to 1000), the number of phone calls and the weight threthold, respectively. Then N lines follow, each in the following format:\nName1 Name2 Time\nwhere Name1 and Name2 are the names of people at the two ends of the call, and Time is the length of the call. A name is a string of three capital letters chosen from A-Z. A time length is a positive integer which is no more than 1000 minutes."
        },
        "outputDescription": {
            "content": "For each test case, first print in a line the total number of gangs. Then for each gang, print in a line the name of the head and the total number of the members. It is guaranteed that the head is unique for each gang. The output must be sorted according to the alphabetical order of the names of the heads."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8 59\nAAA BBB 10\nBBB AAA 20\nAAA CCC 40\nDDD EEE 5\nEEE DDD 70\nFFF GGG 30\nGGG HHH 20\nHHH FFF 10\n8 70\nAAA BBB 10\nBBB AAA 20\nAAA CCC 40\nDDD EEE 5\nEEE DDD 70\nFFF GGG 30\nGGG HHH 20\nHHH FFF 10"
                },
                "output": {
                    "content": "2\nAAA 3\nGGG 3\n0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 53
    },
    {
        "title": "A+B(2)",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定两个整数A和B，其表示形式是：从个位开始，每三位数用逗号\",\"隔开。 现在请计算A+B的结果，并以正常形式输出。"
        },
        "inputDescription": {
            "content": "输入包含多组数据数据，每组数据占一行，由两个整数A和B组成（-10^9 < A,B < 10^9）。"
        },
        "outputDescription": {
            "content": "请计算A+B的结果，并以正常形式输出，每组数据占一行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "-234,567,890 123,456,789\n1,234 2,345,678"
                },
                "output": {
                    "content": "-111111101\n2346912"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 54
    },
    {
        "title": "Graduate Admission",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "It is said that in 2013, there were about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.\nEach applicant will have to provide two grades: the national entrance exam grade GE?, and the interview grade GI?. The final grade of an applicant is (GE?+ GI?) / 2. The admission rules are:"
        },
        "inputDescription": {
            "content": "Each input file contains one test case.  Each case starts with a line containing three positive integers: N (<=40,000), the total number of applicants; M (<=100), the total number of graduate schools; and K (<=5), the number of choices an applicant may have.\nIn the next line, separated by a space, there are M positive integers.  The i-th integer is the quota of the i-th graduate school respectively.\nThen N lines follow, each contains 2+K integers separated by a space.  The first 2 integers are the applicant's GE and GI, respectively.  The next K integers represent the preferred schools.  For the sake of simplicity, we assume that the schools are numbered from 0 to M-1, and the applicants are numbered from 0 to N-1."
        },
        "outputDescription": {
            "content": "For each test case you should output the admission results for all the graduate schools.  The results of each school must occupy a line, which contains the applicants' numbers that school admits.  The numbers must be in increasing order and be separated by a space.  There must be no extra space at the end of each line.  If no applicant is admitted by a school, you must output an empty line correspondingly."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "11 6 3\n2 1 2 2 2 3\n100 100 0 1 2\n60 60 2 3 5\n100 90 0 3 4\n90 100 1 2 0\n90 90 5 1 3\n80 90 1 0 2\n80 80 0 1 2\n80 80 0 1 2\n80 70 1 3 2\n70 80 1 2 3\n100 100 0 2 4"
                },
                "output": {
                    "content": "0 10\n3\n5 6 7\n2 8\n\n1 4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 55
    },
    {
        "title": "Hello World for U",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given any string of N (>=5) characters, you are asked to form the characters into the shape of U. For example, \"helloworld\" can be printed as: h??d e ?l l? r lowo That is, the characters must be printed in the original order, starting top-down from the left vertical line with n1 characters, then left to right along the bottom line with n2 characters, and finally bottom-up along the vertical line with n3 characters. And more, we would like U to be as squared as possible -- that is, it must be satisfied that n1 = n3 = max { k| k <= n2 for all 3 <= n2 <= N } with n1 + n2 + n3 - 2 = N."
        },
        "inputDescription": {
            "content": "There are multiple test cases.Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space."
        },
        "outputDescription": {
            "content": "For each test case, print the input string in the shape of U as specified in the description."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "helloworld!\nwww.noobdream.com"
                },
                "output": {
                    "content": "h   !\ne   d\nl   l\nlowor\nw     m\nw     o\nw     c\n.     .\nn     m\noobdrea"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 56
    },
    {
        "title": "A+B for Matrices",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "This time, you are supposed to find A+B where A and B are two matrices, and then count the number of zero rows and columns."
        },
        "inputDescription": {
            "content": "The input consists of several test cases, each starts with a pair of positive integers M and N (≤10) which are the number of rows and columns of the matrices, respectively. Then 2*M lines follow, each contains N integers in [-100, 100], separated by a space. The first M lines correspond to the elements of A and the second M lines to that of B.\n    The input is terminated by a zero M and that case must NOT be processed."
        },
        "outputDescription": {
            "content": "For each test case you should output in one line the total number of zero rows and columns of A+B."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 2\n1 1\n1 1\n-1 -1\n10 9\n2 3\n1 2 3\n4 5 6\n-1 -2 -3\n-4 -5 -6\n0"
                },
                "output": {
                    "content": "1\n5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 57
    },
    {
        "title": "To Fill or Not to Fi",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "With highways available, driving a car from Hangzhou to any other city is easy. But since the tank capacity of a car is limited, we have to find gas stations on the way from time to time. Different gas station may give different price. You are asked to carefully design the cheapest route to go."
        },
        "inputDescription": {
            "content": "For each case, the first line contains 4 positive numbers: Cmax (<= 100), the maximum capacity of the tank; D (<=30000), the distance between Hangzhou and the destination city; Davg (<=20), the average distance per unit gas that the car can run; and N (<= 500), the total number of gas stations. Then N lines follow, each contains a pair of non-negative numbers: Pi, the unit gas price, and Di (<=D), the distance between this station and Hangzhou, for i=1,...N. All the numbers in a line are separated by a space."
        },
        "outputDescription": {
            "content": "For each test case, print the cheapest price in a line, accurate up to 2 decimal places. It is assumed that the tank is empty at the beginning. If it is impossible to reach the destination, print \"The maximum travel distance = X\" where X is the maximum possible distance the car can run, accurate up to 2 decimal places."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "50 1300 12 8\n6.00 1250\n7.00 600\n7.00 150\n7.10 0\n7.20 200\n7.50 400\n7.30 1000\n6.85 300\n50 1300 12 2\n7.10 0\n7.00 600"
                },
                "output": {
                    "content": "749.17\nThe maximum travel distance = 1200.00"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 58
    },
    {
        "title": "Conway’s Conjecture",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "John Horton Conway, a British mathematician active in recreational mathematics, proposed a conjecture in 2014: arrange the factors of any given number in ascending order, and pull the exponents down, we can get another number. Keep doing so we must end up at a prime number. For example:\n18=2×3^2\n??232=2^3?×29\n2329=17×137\n17137 is a prime.\nNow you are supposed to write a program to make one step verification of this conjecture. That is, for any given positive integer N, you must factorize it, and then test if the number obtained from its factors is a prime.,By the way, this conjecture has been proven false by James Davis, who has discovered a counter example: 135323853961879=13×53^2×3853×96179. Alas …"
        },
        "inputDescription": {
            "content": "Each input file contains one test case which gives a positive integer N(<10^?5??)"
        },
        "outputDescription": {
            "content": "For each case, first print in a line the number obtained from N’s factors. The in the next line, print Yes if the above number is a prime, or No if not."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2329"
                },
                "output": {
                    "content": "17137\nYes"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 59
    },
    {
        "title": "Play with Linked List",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given a singly linked list L?1→L?2→?→Ln?1 →Ln and an integer 1≤k<n, you are supposed to rearrange the links to obtain a list like L?k→Ln→Lk?1→Ln?1→?. For example, given L being 1→2→3→4→5→6 and k=4, you must output 4→6→3→5→2→1."
        },
        "inputDescription": {
            "content": "Each input file contains one test case. For each case, the first line contains the address of the first node, a positive N (≤10^?5) which is the total number of nodes, and an integer 1≤k<n where n is the number of nodes in the linked list. The address of a node is a 5-digit nonnegative integer, and NULL is represented by -1.\n\nThen N lines follow, each describes a node in the format:\n\nAddress Data Next\nwhere Address is the position of the node, Data is a positive integer no more than 10^5\n?? , and Next is the position of the next node. It is guaranteed that there are at least two nodes on the list."
        },
        "outputDescription": {
            "content": "For each case, output in order the resulting linked list. Each node occupies a line, and is printed in the same format as in the input."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "00100 6 4\n00000 4 99999\n00100 1 12309\n68237 6 -1\n33218 3 00000\n99999 5 68237\n12309 2 33218"
                },
                "output": {
                    "content": "00000 4 68237\n68237 6 33218\n33218 3 99999\n99999 5 12309\n12309 2 00100\n00100 1 -1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 60
    },
    {
        "title": "Unsuccessful Searches",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "above figure is a question from GRE-CS 2018. It states:,Given an initially empty hash table HT of size 11. The hash function is H(key)=key%7, with linear probing used to resolve the collisions. Now hash the keys 87, 40, 30, 6, 11, 22, 98 and 20 one by one into HT. What is the average search time for unsuccessful searches?,The answer is 6.,Now you are supposed to write a program to solve this kind of problems."
        },
        "inputDescription": {
            "content": "Each input file contains one test case. For each case, the first line gives 3 positive integers TSize (≤10^?3, the table size), M (≤TSize, the divisor in the hash function), and N (≤TSize, the number of integers to be inserted). Then N non-negative integers (≤10 ^4) are given in the next line, separated by spaces."
        },
        "outputDescription": {
            "content": "Print in a line the average search time for unsuccessful searches, after hashing the N integers into the table. The answer must be accurate up to 1 decimal place."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "11 7 8\n87 40 30 6 11 22 98 20"
                },
                "output": {
                    "content": "6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 61
    },
    {
        "title": "Ambulance Dispatch",
        "sourceUniversity": "浙江大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given the map of a city, with all the ambulance dispatch centers (救护车派遣中心) and all the pick-up spots marked. You are supposed to write a program to process the emergency calls. It is assumed that the callers are waiting at some pick-up spot. You must inform the nearest (that is, to take the minimum time to reach the spot) dispatch center if that center has at least one ambulance available. Note: a center without any ambulance must not be considered.,In case your options are not unique, inform the one with the largest number of ambulances available. If there is still a tie, choose the one that can pass the least number of streets to reach the spot, which is guaranteed to be unique."
        },
        "inputDescription": {
            "content": "Each input file contains one test case. For each case, the first line contains two positive integers Ns(≤10^?3) and N?a(≤10), which are the total number of pick-up spots and the number of ambulance dispatch centers, respectively. Hence the pick-up spots are numbered from 1 to Ns, and the ambulance dispatch centers are numbered from A?1 to A?Na .\n\nThe next line gives Na non-negative integers, where the i-th integer is the number of available ambulances at the i-th center. All the integers are no larger than 100.\n\nIn the next line a positive number M (≤10^?4) is given as the number of streets connecting the spots and the centers. Then M lines follow, each describes a street by giving the indices of the spots or centers at the two ends, followed by the time taken to pass this street, which is a positive integer no larger than 100.\n\nFinally the number of emergency calls, K, is given as a positive integer no larger than 10^3, followed by K indices of pick-up spots.\n\nAll the inputs in a line are separated by a space."
        },
        "outputDescription": {
            "content": "For each of the K calls, first print in a line the path from the center that must send an ambulance to the calling spot. All the nodes must be separated by exactly one space and there must be no extra space at the beginning or the end of the line. Then print the minimum time taken to reach the spot in the next line. It is assumed that the center will send an ambulance after each call. If no ambulance is available, just print All Busy in a line. It is guaranteed that all the spots are connected to all the centers."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7 3\n3 2 2\n16\nA-1 2 4\nA-1 3 2\n3 A-2 1\n4 A-3 1\nA-1 4 3\n6 7 1\n1 7 3\n1 3 3\n3 4 1\n6 A-3 5\n6 5 2\n5 7 1\nA-2 7 5\nA-2 1 1\n3 5 1\n5 A-3 2\n8\n6 7 5 4 6 4 3 2"
                },
                "output": {
                    "content": "A-3 5 6\n4\nA-2 3 5 7\n3\nA-3 5\n2\nA-2 3 4\n2\nA-1 3 5 6\n5\nA-1 4\n3\nA-1 3\n2\nAll Busy"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 62
    },
    {
        "title": "特殊排序",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一系列整数，将其中最大的数挑出(如果有多个，则挑出一个即可)，并将剩下的数进行排序，如果无剩余的数，则输出-1。"
        },
        "inputDescription": {
            "content": "输入第一行包括1个整数N，1<=N<=1000，代表输入数据的个数。\n接下来的一行有N个整数。"
        },
        "outputDescription": {
            "content": "可能有多组测试数据，对于每组数据，\n第一行输出一个整数，代表N个整数中的最大值，并将此值从数组中去除，将剩下的数进行排序。\n第二行将排序的结果输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n1 3 4 2"
                },
                "output": {
                    "content": "4\n1 2 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 63
    },
    {
        "title": "最大的两个数",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个四行五列的矩阵，找出每列最大的两个数。"
        },
        "inputDescription": {
            "content": "接下来的四行每行包括五个整数。代表一个四行五列的矩阵，矩阵元素全部是整数。"
        },
        "outputDescription": {
            "content": "可能有多组测试数据，对于每组数据，按照样例输出的格式将每列最大的两个数输出，如果最大的两个数中的一个数在这一列中有多个相同的值，则行值取行值小的那一个。\n    输出时要保留原矩阵的行列顺序，即在原矩阵中行值小的，在输出矩阵中的行值依然小。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1  2   4  9  8\n-1  4  9  8  8\n12  9  8  7  0\n7   8  9  7  0"
                },
                "output": {
                    "content": "12 9 9 9 8 \n7 8 9 8 8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 64
    },
    {
        "title": "梅森素数",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "关于梅森素数。所谓梅森数，是指形如2^p-1的一类数，其中指数p是素数，常记为M(p)。如果p是素数的同时，梅森数（即2^p-1)也是素数，就称这个梅森数为梅森素数。输入一个长整型数n，输出不大于它的所有梅森素数。"
        },
        "inputDescription": {
            "content": "输入一个长整型数"
        },
        "outputDescription": {
            "content": "输出比该数字小的梅森素数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1000"
                },
                "output": {
                    "content": "M(2)=3\nM(3)=7\nM(5)=31\nM(7)=127"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 65
    },
    {
        "title": "文件处理",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "文件操作及字符串处理。输入一个源文件abc.c的代码。在abc.c文件中有相当数量的注释，包括//和/*...*/两种形式的注释。,1、将输入的abc.c文件的内容，将其显示在控制台上，(并为每行代码增加一个行号)。,2、使源代码中的//类型的注释内容不显示在控制台中。,3、使源代码中的/*...*/类型的注释内容不显示在控制台中。"
        },
        "inputDescription": {
            "content": "输入多行源代码"
        },
        "outputDescription": {
            "content": "输出处理过的源代码"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "#include <stdio.h>\n/*\n这是一个求两数之和的程序\n*/\nint main() {\n    int a, b;//定义\n    //输入\n    scanf(\"%d%d\", &a, &b);\n    /*  输出  */\n    printf(\"%d\\n\", a + b);\n    return 0;\n}"
                },
                "output": {
                    "content": "#include <stdio.h>\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n    return 0;\n}"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 66
    },
    {
        "title": "字符串的操作",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "凯撒密码。从键盘输入一个由字母组成的字符串，对字符串中的每个字符进行偏移操作，每个字符都向后偏移两个。即：a->c，Z->B。然后输出偏移后的每个字符的奇校验码及其对应的十进制数，如果字符中1的个数为偶数，将其最高位置为1。"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "aD"
                },
                "output": {
                    "content": "原文：aD\n密文：cF\nc  11100011  227\nF  01000110  70"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 67
    },
    {
        "title": "单词个数统计",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "从键盘输入一行英文句子，句子中只有英文单词和空格，每个单词之间用若个空格隔开，英文单词由大小写字母组成，编程完成以下任务：,（1）统计并输出此句子中英文字母的个数；（10分）,（2）统计并输出此句子中单词的个数；（10分）,（3）查找此句子中出现次数最多的字母（不区分大小写，大小写字母是相同的）及次数。当出现最多的字符不止一个时，都能找到，并输出找到的所有字母及次数。（输出字母时大小写均可）? （20分）"
        },
        "inputDescription": {
            "content": "输入只有一行句子。仅有空格和英文字母构成，末尾以回车作为结束。（不超过1000个字符）"
        },
        "outputDescription": {
            "content": "在接下来的每一行分别输出字母个数、单词个数、出现次数最多的字符（不止一个则用空格隔开）、出现的次数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "This is An Pencil Case"
                },
                "output": {
                    "content": "18\n5\ni s\n3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 68
    },
    {
        "title": "进制转换",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "十二进制是数学中一种以12为底数的计数系统，它由0~9，a，b组成，与十进制的对应关系是：0~9对应0~9，a对应10，b对应11。例如，十二进制的a2，十进制是122。输入一个仅含十二进制数字的字符串（字母一律小写，不超过8个字符），完成下列任务：,（1）输出该十二进制数每一位对应的十进制数（从高位到低位顺序输出，空格隔开）；,（2）实现“十二进制”转“十进制”算法，输出该十二进制数对应的十进制数；,（3）输出转换后的十进制数在内存中的每个二进制位（共4字节，每字节之间空格隔开）。"
        },
        "inputDescription": {
            "content": "输入一个十二进制数（字母一律小写，不超过8个字符）。"
        },
        "outputDescription": {
            "content": "第一行输出该十二进制数每一位对应的十进制数（由高位到低位，以空格隔开）\n第二行输出该十二进制数对应的十进制数\n第三行输出转换后的十进制数在内存中的每个二进制位（共4个字节，每字节之间空格隔开）"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "a2"
                },
                "output": {
                    "content": "10 2\n122\n00000000 00000000 00000000 01111010"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 69
    },
    {
        "title": "分数转小数",
        "sourceUniversity": "华中科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "编写程序，接受4个以N/D形式输入的分数，其中N（0<=N<=65535）为分子，D（0<=D<=65535）为分母，输出他们的小数形式。,如果小数存在循环节，则用括号括起来，如1/3=.33333...表示为0.(3)。"
        },
        "inputDescription": {
            "content": "输入4个N/D形式的分数"
        },
        "outputDescription": {
            "content": "输出N/D=整数部分.小数部分，小数部分如存在循环节则将循环部分用括号括起来。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8/5 1/3 11/13 2/15"
                },
                "output": {
                    "content": "1.6\n0.(3)\n0.(846153)\n0.1(3)"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 70
    },
    {
        "title": "水仙花数",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的：\n“水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3+5^3+3^3。\n现在要求输出所有在m和n范围内的水仙花数。"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占一行，包括两个整数m和n（100<=m<=n<=999），输入为0 0时表示输入数据结束（不需要输出）。"
        },
        "outputDescription": {
            "content": "对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于m,并且小于等于n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开（末尾有空格）; \n如果给定的范围内不存在水仙花数，则输出no; \n每个测试实例的输出完毕后换行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "100 120 \n300 380 \n0 0"
                },
                "output": {
                    "content": "no\n370 371"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 71
    },
    {
        "title": "成绩的等级",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出一百分制成绩，要求输出成绩等级‘A’、‘B’、‘C’、‘D’、‘E’。 90分以上为A 80-89分为B 70-79分为C 60-69分为D 60分以下为E"
        },
        "inputDescription": {
            "content": "一个整数0－100以内"
        },
        "outputDescription": {
            "content": "一个字符，表示成绩等级"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "90"
                },
                "output": {
                    "content": "A"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 72
    },
    {
        "title": "日期计算",
        "sourceUniversity": "中南大学2016年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "定义一个结构体变量（包括年、月、日），编程序，要求输入年月日,计算并输出该日\n在本年中第几天。"
        },
        "inputDescription": {
            "content": "输入三个整数(并且三个整数是合理的,既比如当输入月份的时候应该在1 至12 之间，\n 不应该超过这个范围)否则输出Input error!"
        },
        "outputDescription": {
            "content": "输出一个整数.既输入的日期是本年的第几天。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1985 1 20\n2006 3 12"
                },
                "output": {
                    "content": "20\n71"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 73
    },
    {
        "title": "平方和与立方和",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。"
        },
        "inputDescription": {
            "content": "输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。(m ,n不相等) m,n为要处理的数据范围；"
        },
        "outputDescription": {
            "content": "对于每组输入数据，输出一行，应包括两个整数x和y，(两个数之间用一个空格隔开)分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。 你可以认为32位整数足以保存结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 3\n2 5"
                },
                "output": {
                    "content": "4 28\n20 152"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 74
    },
    {
        "title": "合并果子",
        "sourceUniversity": "中南大学2016年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。 每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。 因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。 例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。"
        },
        "inputDescription": {
            "content": "输入包括两行，第一行是一个整数n(1<＝n<=10000)，表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai(1<＝ai<=20000)是第i种果子的数目。"
        },
        "outputDescription": {
            "content": "输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2^31。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 \n1 2 9"
                },
                "output": {
                    "content": "15"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 75
    },
    {
        "title": "回文串问题",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "“回文串”是一个正读和反读都一样的字符串，字符串由数字和小写字母组成，比如“level”或者“abcdcba”等等就是回文串。请写一个程序判断读入的字符串是否是“回文”。"
        },
        "inputDescription": {
            "content": "输入包含多个测试实例，每一行对应一个字符串，串长最多100字母。"
        },
        "outputDescription": {
            "content": "对每个字符串，输出它是第几个，如第一个输出为\"case1: \"；如果一个字符串是回文串，则输出\"yes\",否则输出\"no\"，在yes/no之前用一个空格。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "level\nabcde\nnoon\nhaha"
                },
                "output": {
                    "content": "case1: yes\ncase2: no\ncase3: yes\ncase4: no"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 76
    },
    {
        "title": "安全密码",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "网络上各类交易活动越来越普及，为了能够安安心心地上网，经常需要设置一个安全的密码。一般来说一个比较安全的密码至少应该满足下面两个条件：?\n(1)密码长度大于等于8。\n(2)密码中的字符应该来自下面“字符类别”中四组中的至少三组。?\n这四个字符类别分别为：\n(1)大写字母：A,B,C...Z;\n(2)小写字母：a,b,c...z;\n(3)数字：0,1,2...9;\n(4)特殊符号：~,!,@,#,$,%,^;?\n给你一个密码，你的任务就是判断它是不是一个安全的密码。"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占一行，每行一个密码（长度最大可能为50），密码仅包括上面的四类字符。"
        },
        "outputDescription": {
            "content": "对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出YES，否则输出NO。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "a1b2c3d4\nLinle@ACM\n^~^@^@!%"
                },
                "output": {
                    "content": "NO\nYES\nNO"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 77
    },
    {
        "title": "惠民工程",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "市政府“惠民工程”的目标是在全市n个居民点间之架设煤气管道（但不一定有直接的管道相连，只要能间接通过管道可达即可）。很显然最多可架设 n(n-1)/2条管道,然而实际上要连通n个居民点只需架设n-1条管道就可以了。现请你编写程序，计算出该惠民工程需要的最低成本。"
        },
        "inputDescription": {
            "content": "测试输入包含若干测试用例。每个测试用例的第1行给出居民点数目M ( < =100 )、 评估的管道条数 N；随后的 N 行对应居民点间管道的成本，每行给出一对正整数，分别是两个居民点的编号，以及此两居民点间管道的成本（也是正整数）。为简单起见，居民点从1到M编号。"
        },
        "outputDescription": {
            "content": "对每个测试用例，在1行里输出全市管道畅通所需要的最低成本。若统计数据不足以保证畅通，则输出“?”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 3\n1 2 1\n1 3 2\n2 3 4\n3 1\n2 3 2"
                },
                "output": {
                    "content": "3\n?"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 78
    },
    {
        "title": "最少钱币数",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "作为A公司的职员，最盼望的日子就是每月的8号了，因为这一天是发工资的日子，养家糊口就靠它了。但是对于公司财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡最近就在考虑一个问题：如果每个员工的工资额都知道，最少需要准备多少张人民币，才能在给每位职员发工资的时候都不用老师找零呢？这里假设员工的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。"
        },
        "inputDescription": {
            "content": "输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n<=100），表示老师的人数，然后是n个老师的工资（工资<5000）。"
        },
        "outputDescription": {
            "content": "每个测试用例输出一行，即凑成钱数值M最少需要的钱币个数。如果凑钱失败，输出“Impossible”。你可以假设，每种待凑钱币的数量是无限多的。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n1 2 3\n2\n1 2"
                },
                "output": {
                    "content": "4\n2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 79
    },
    {
        "title": "破译密码",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "据说最早的密码来自于罗马的凯撒大帝。消息加密的办法是：对消息原文中的每个字母，分别用该字母之后的第5个字母替换（例如：消息原文中的每个字母A?都分别替换成字母F）。而你要获得消息原文，也就是要将这个过程反过来。,密码字母：A?B C D E F G H I?J K L M N O P Q R S T U V W X Y Z,原文字母：V?W X Y Z A B C D E F G H I?J K L M N O P Q R S T U?\n（注意：?只有字母会发生替换，其他非字母的字符不变，并且消息原文的所有字母都是大写的。）"
        },
        "inputDescription": {
            "content": "最多不超过 100 个数据集组成，每个数据集之间不会有空行，每个数据集由 3 部分组成: \n起始行： START \n密码消息：由 1 到 200 个字符组成一行，表示凯撒发出的一条消息. \n结束行： END \n在最后一个数据集之后，是另一行：ENDOFINPUT。"
        },
        "outputDescription": {
            "content": "每个数据集对应一行，是凯撒的原始消息。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "START\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\nEND\nSTART\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\nEND\nSTART\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\nEND\nENDOFINPUT"
                },
                "output": {
                    "content": "IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 80
    },
    {
        "title": "中南 - 最大连续子序列",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定?K?个整数的序列{?N1, ?N2, ?...,?NK }?，其任意连续子序列可表示为{?Ni,?Ni+1,...,Nj}?，其中1 <= i<= j?<= K。最大连续子序列是所有连续子序列中元素和最大的一个，例如给定序列{ -2,?11,?-4,?13,?-5,?-2?}?，其最大连续子序列为{?11,?-4,?13 }?，最大和为20。编写程序得到其中最大子序列的和并输出该子序列的第一个和最后一个元素的下标。"
        },
        "inputDescription": {
            "content": "测试输入包含若干测试用例，每个测试用例占2 行，第 1 行给出正整数 K( <100000) ，第 2 行给出 K 个整数，每个整数的范围-10000至10000 ，中间用空格分隔。"
        },
        "outputDescription": {
            "content": "对每个测试用例， 在 1 行里输出最大和、 最大连续子序列的第一个和最后一个元素的下标，中间用空格分隔。 如果最大连续子序列不唯一， 则输出序号 i 和 j 最小的那个（如输入样例的第 2、3组）。若所有 K 个元素都是负数，则定义其最大和为0，输出\"0 0 0\"。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n6 -2 11 -4 13 -5 -2 10\n20\n-10 1 2 3 4 -5 -23 3 7 -21 6 5 -8 3 2 5 0 1 10 3\n8\n-1 -5 -2 3 -1 0 -2 0\n4 \n-1 -2 -4 -3"
                },
                "output": {
                    "content": "27 0 7\n27 10 19\n3 3 3\n0 0 0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 81
    },
    {
        "title": "安全路径",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "卫斯理小说经常提及外星人，比如蓝血人。?在土星星球有很多城市，每个城市之间有一条或多条飞行通道，?但是并不是所有的路都是很安全的，每一条路有一个安全系数?s,s?是在 0和1?间的实数?(包括?0?，?1)?，一条从?u?到?v?的通道?P?的安全度为?Safe(P) = s(e1)*s(e2)…*s(ek) e1,e2,ek是P?上的边 ，现在蓝血人想出去旅游，面对这这么多的路，他想找一条最安全的路。但是蓝血人的数学不好，想请你帮忙?^_^ --"
        },
        "inputDescription": {
            "content": "输入包括多个测试实例，每个实例包括： \n第一行： 一个整数 n。 n 表示城市的个数 n<=1000; \n接着是一个 n*n 的矩阵表示两个城市之间的安全系数， (0可以理解为那两个城市之间没有直接的通道 )。 \n接着是一个整数m (m<=100)表示若干个蓝血人要旅游的路线 ,下面每行有两个数字，表示蓝血人所在的城市和要去的城市。"
        },
        "outputDescription": {
            "content": "如果蓝血人无法达到他的目的地，输出 \"What a pity!\" ， \n其他的输出这两个城市之间的最安全道路的安全系数，保留三位小数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n1 0.5 0.5\n0.5 1 0.4\n0.5 0.4 1\n3\t\t\n1 2\n2 3\n1 3"
                },
                "output": {
                    "content": "0.500\n0.400\n0.500"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 82
    },
    {
        "title": "好坑的电子地图",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小明是今年参加复试的外校考生，他要去民主楼小礼堂签到。由于对中南大学校本部很不熟悉，小明找到了这边读书的好朋友鲁大师，不巧，鲁大师在忙着自由探索项目的结题工作，不能给他带路，只好给他发了一份半成品的电子地图。地图上只列出了校本部内的N个点，M条路，小明处于S点，民主楼小礼堂是T点。小明感谢鲁大师，当然只是在拿到地图的一瞬间，后面的情况让他知道这半成品到底有多坑。鲁大师制作的电子地图是带有语音提示功能的，但是在编号为奇数的点他要等1分钟才能告诉他具体怎么走，而在编号为偶数的点要等2分钟。现在告诉你地图的具体情况，小明想知道他能不能在A分钟内赶到民主楼小礼堂。"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占M+1行，第一行有5个数字N，M，S，T，A，接下来M行，每行三个数字u,v,t，代表每条路的两个顶点和步行时间。（输入数据保证不含重边0<N<M<1000）"
        },
        "outputDescription": {
            "content": "对于每组输入数据，输出一行，小明能在A分钟内赶到民主楼小礼堂输出YES和最少花费的时间，否则输出KENG"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 3 1 4 10\n1 2 1\n3 2 2\n3 4 3\n5 4 2 4 7\n1 2 5\n5 4 2\n3 5 1\n2 3 1"
                },
                "output": {
                    "content": "YES 10\nKENG"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 83
    },
    {
        "title": "容易的题",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "大家都很关心考试难易程度。K老师出题有一个规律，在出题之前，他会随机写下一个字符\n串，只要这个字符串中能按顺序找到E,A,S,Y四个字母。他出题就会比较简单。你拿到了这个\n字符串，请你告诉考试的题目难不难吧。"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占一行，由一个字符串组成（字符串的长度不超过1000）"
        },
        "outputDescription": {
            "content": "对于每组输入，输出一行，对应一个要求的答案（题目容易就输出easy，难就输出difficult)。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "eAsy\nSEoAtSNY"
                },
                "output": {
                    "content": "difficult\neasy"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 84
    },
    {
        "title": "数字",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小诺在做一个调查，0到9的10个数字中大家最喜欢哪一个？他询问了N个人，用这些人的方法告诉他的数字组成了一个N位的整数。然后小诺就去给女朋友打电话了，他叫你帮忙统计一下，这个整数中哪一个数字出现最多。"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占一行，由一个N为的整数构成（小诺急着打电话，没有告诉你N是多少，只告诉这个数字小于10的1000次方）。"
        },
        "outputDescription": {
            "content": "对于每组输入数据，输出一行，对应一个要求的答案（答案为0~9之间的一个数字，如果有多个数字出现次数一样多的情况，输出最小的数字）"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1234567891\n11122333\n1235564"
                },
                "output": {
                    "content": "1\n1\n5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 85
    },
    {
        "title": "防水堤坝",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在太平洋的一个小岛上，岛民想要建立一个环岛的堤坝，我们可以将小岛简化为一个二维平面，你需要使用K条边（这些边要么是水平或者垂直长度为1的边，要么是45度倾斜的长度为sqrt(2)的边）围成一个多边形，多边形的顶点必须位于整点，然后要让围成的多边形面积最大，你需要求出最大面积是多少。"
        },
        "inputDescription": {
            "content": "输入包含多个测试实例，每组实例给出一个数K。（3<=K<=2,000,000,000）"
        },
        "outputDescription": {
            "content": "每一行对应一个要求的答案。（—保留一位小数）"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n4\n5\n6"
                },
                "output": {
                    "content": "0.5\n2.0\n2.5\n4.0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 86
    },
    {
        "title": "奇怪的餐厅",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "鲁大师和他的朋友经常去一家奇怪的餐厅，为什么说奇怪呢，一是餐厅提供的菜品比较奇怪，二是餐厅的付费规则比较奇怪，每个人有不同的折扣上限（单人从总结里折算的最高金额），超过折扣上限的部分原价付费（N个人可以每人出一部分），这次鲁大师和魏然层风以及朋友一共N个人去这家餐厅吃饭，他们点的菜品总金额为T，现在告诉你每个人的折扣率z和折扣上限H，请告诉他们最少需要支付多少钱？"
        },
        "inputDescription": {
            "content": "输入数据有多组，每组占N+1行，第一行是N和T，接下来N行，每行两个数字z和H（0<N<100）。"
        },
        "outputDescription": {
            "content": "对于每组输入数据，输出一行，对应一个要求的答案。答案向下取整。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 100\n0.7 70\n0.6 50\n3 500\n0.6 100\n0.8 200\n0.7 100\n1 100\n0.6 100"
                },
                "output": {
                    "content": "65\n390\n60"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 87
    },
    {
        "title": "加油站",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "一辆汽车加满油后可行驶?n公里。 旅途中有若干加油站。 设计一个有效算法,指出应在哪些加油站停靠加油,使沿途加油次数最少。请对于给定的?n和?k个加油站位置， 计算最少加油次数。"
        },
        "inputDescription": {
            "content": "输入包含多组测试用例。\n\n对于每一组数据，其第1行有2个正整数n（1≤n≤5000）和 k（1≤k≤5000）。表示汽车加满油后可行驶 n公里，且旅途中有 k个加油站。接下来的1行中，有 k+1个整数，表示第 k个加油站与第 k-1个加油站之间的距离。第 0个加油站表示出发地，汽车已加满油。第 k+1个加油站表示目的地。"
        },
        "outputDescription": {
            "content": "数据输出一行。 如果所对应的输入数据数据可以到达， 将计算的最少加油次数输出。 如果无法到达目的地，则输出“NoSolution”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7 7\n1 2 3 4 5 1 6 6"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 88
    },
    {
        "title": "序列求平均",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有一个长度为?n(n<=100)的数列， 该数列定义为从2开始的递增有序偶数， 现在要求你按照顺序每?m个数求出一个平均值， 如果最后不足?m个， 则以实际数量求平均值。编程输出该平均值序列。"
        },
        "inputDescription": {
            "content": "输入数据有多组， 每组占一行， 包含两个整数 n和 m （1<=m,n<=100）， n和 m的含义如上所述。"
        },
        "outputDescription": {
            "content": "对于每组输入数据， 输出一个平均值序列， 每组输出占一行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 2\n4 2"
                },
                "output": {
                    "content": "3 6 \n3 7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 89
    },
    {
        "title": "士兵排阵",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在一个划分成网格的操场上，?n个士兵散乱地站在网格点上。 网格点由整数坐标(x,y)表示。士兵们可以沿网格边上、 下、 左、 右移动一步， 但在同一时刻任一网格点上只能有一名士兵。按照军官的命令，士兵们要整齐地列成一个水平队列，即排列成(x,y),(x+1,y),…,(x+n-1,y)。如何选择?x?和?y的值才能使士兵们以最少的总移动步数排成一列。 计算使所有士兵排成一行需要的最少移动步数。"
        },
        "inputDescription": {
            "content": "多组测试用例。\n\n对于每一组测试用例,第1行是士兵数 n， 1≤n≤10000。 接下来 n行是士兵的初始位置， 每行有2个整数 x和 y，-10000≤x， y≤10000。"
        },
        "outputDescription": {
            "content": "数据的输出为一行， 表示士兵排成一行需要的最少移动步数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 2\n2 2\n1 3\n3 -2\n3 3"
                },
                "output": {
                    "content": "8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 90
    },
    {
        "title": "切木棍",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "你有一根长度为n的木棍(n是整数)，现在需要你用这个木棍做一个矩形（但是不能是正方形），矩形的每条边的长度为整数。你可以将这个木棍切成四份，作为矩形的四条边，请问你组成多少种不同的矩形？"
        },
        "inputDescription": {
            "content": "对于每组数据，输入一个整数，即为木棍的长度n（1<=n<=10^5）"
        },
        "outputDescription": {
            "content": "对于每组数据，输出一个整数，表示能组成的矩形种数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n20"
                },
                "output": {
                    "content": "1\n4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 91
    },
    {
        "title": "机器人走迷宫",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有一个愚蠢的机器人走进一个w*h的迷宫，迷宫里有空地和陷阱。他想要访问迷宫的每个方格，但是它很笨，只会按照指令的方向走。当机器人不能走的时候，也就是下一步会遇到陷阱、迷宫边界或者访问过的格子，它会向右转90度(顺时针旋转90度，不能访问已经访问过的方格，且在原地只转一次，移动后可获得又一次旋转机会)。请问这个机器人最多可以经过多少个方格。,例如：,5 5,R....,.....,.....,.....,.....,机器人可以经过25个格子，但是,2 3,..L,...,机器人只能经过3个格子。"
        },
        "inputDescription": {
            "content": "对于每组数据，第一行两个数w和h，表示迷宫的行和列(1<=w,h<=10) \n接下来w行每行有h个字符用于描述这个迷宫。迷宫的‘.’表示空地，即为可以走的地方。‘*’表示陷阱，即为不能走的地方。迷宫中有一个英文字母，表示机器人的出发点，字母只有’U’,’D’,’L’,’R’四种。分别表示机器人的初始指令是向上，向下，向左，向右。"
        },
        "outputDescription": {
            "content": "对于每组数据，输出一个整数，即机器人一共经过多少个方格。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 3\nU..\n.*.\n4 4\nR...\n.**.\n.**.\n...."
                },
                "output": {
                    "content": "4\n12"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 92
    },
    {
        "title": "淘金",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在一片n*m的土地上，每一块1*1的区域里都有一定数量的金子。这一天，你到这里来淘金，然而当地人告诉你，如果你挖了某一区域的金子，上一行，下一行，左边，右边的金子你都不能被允许挖了。那么问题来了：你最多能淘金多少？"
        },
        "inputDescription": {
            "content": "多组数据输入。\n对于每组数据，第一行两个数n,m，表示土地的长和宽(1<=n,m<=200) \n接下来n行,每行m个数，表示每个区域的金子数量，每个区域的金子数量不超过1000"
        },
        "outputDescription": {
            "content": "对于每组数据，输出最多得到的金子数量"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 6\n11 0 7 5 13 9\n78 4 81 6 22 4\n1 40 9 34 16 10\n11 22 0 33 39 6"
                },
                "output": {
                    "content": "242"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 93
    },
    {
        "title": "巨人排队",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "巨人国的小学生放假了，老师要给小朋友们排队了。可是这个老师有强迫症，一定要路队上的小朋友按照身高从高到矮排序（也就是排在前面的不能比后面的矮）。小朋友呢也很调皮，一旦老师给他排好队就不愿意动了。这个时候小朋友们一个一个的从教室里出来了，每个小朋友一出来老师就要给小朋友安排好位置。请问老师最少要给小朋友排几条路队呢？"
        },
        "inputDescription": {
            "content": "多组数据输入。\n对于每组数据，第一行两个数n，表示小朋友总数量(1<=n<=100000) \n第二行n个整数，表示小朋友身高，身高不超过30000"
        },
        "outputDescription": {
            "content": "对于每组数据，输出一个整数，表示最少的路队数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n389 207 155 300 299 170 158 65"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 94
    },
    {
        "title": "走路还是坐公交",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "你收到通知被中南大学录取了，高兴的来到了长沙，很快你就来到了岳麓南路上，已知你的位置是N，中南大学的位置是K。为了去中南大学，你有两种移动方式：走路或者坐公交。,走路：你可以从位置X移动到X+1或者X-1,搭公交车：你可以从位置X移动到2X,每次走路或者搭公交车所需要的时间都是1分钟，你想尽快到达中南大学，所需的时间是多少呢？"
        },
        "inputDescription": {
            "content": "多组数据。 \n对于每组数据，输入一行，分别是N和K(0<=N,K<=100,000)"
        },
        "outputDescription": {
            "content": "对于每组数据，输出一行，所需时间"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 17"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 95
    },
    {
        "title": "最短距离",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小王和小明是好朋友，两人最开始各有一个初始位置 p 和一个恒定速度 v，从0时刻起开始，他们从初始位置以恒定速度开始行走，请告诉我行走过程中两人的最短距离是多少。"
        },
        "inputDescription": {
            "content": "第一行输入T代表测试样例数目。 \n对于每个样例，\n\n第一行包含四个整数 x1，y1，x2，y2，表示人的起点（x1，y1），（x2，y2）。\n\n第二行是四个整数u1，v1，u2，v2，表示人的初始速度（u1，v1），（u2，v2）（分别为x轴和y轴方向的分速度）。\n\nT <= 1000 , x1，y1，x2，y2，u1，v1，u2，v2的绝对值不大于1000。"
        },
        "outputDescription": {
            "content": "对于每个样例，输出一行。\"Case i: d\"。i 代表案例编号，d代表答案，四舍五入到小数点后6位。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 1 2 2\n1 1 2 2\n\n1 1 2 2\n1 1 -1 -1\n\n1 1 2 2\n0 1 0 -1\n\n1 1 1 1\n1 1 2 2\n\n0 0 0 1\n0 1 1 0"
                },
                "output": {
                    "content": "Case 1: 1.414214\nCase 2: 0.000000\nCase 3: 1.000000\nCase 4: 0.000000\nCase 5: 0.707107"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 96
    },
    {
        "title": "中南 a+b问题",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "读入两个小于100的正整数A和B，计算A+B，注意: A+B的每一位由对应的英文字母给出。"
        },
        "inputDescription": {
            "content": "测试输入包含若干测试用例,每个测试用例占一行,格式为\"A + B =\",相邻两字符串有一个空格间隔.当A和B同时为zero时输入结束,相应的结果不要输出."
        },
        "outputDescription": {
            "content": "对每个测试用例输出1行,即A+B的值."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "one + two =\nthree four + five six =\nzero + zero ="
                },
                "output": {
                    "content": "3\n90"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 97
    },
    {
        "title": "逃离迷宫",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小诺被困在一个迷宫中了!?\n给定一个m × n (m行, n列)的迷宫，迷宫中有两个位置，小诺想从迷宫的一个位置走到另外一个位置，当然迷宫中有些地方是空地，小诺可以穿越，有些地方是障碍，她必须绕行，从迷宫的一个位置，只能走到与它相邻的4个位置中,当然在行走过程中，小诺不能走到迷宫外面去。令人头痛的是，小诺是个没什么方向感的人，因此，她在行走过程中，不能转太多弯了，否则她会晕倒的。起点和终点也有可能为障碍，初始时，小诺所面向的方向未定，她可以选择4个方向的任何一个出发，而不算成一次转弯。小诺能从一个位置走到另外一个位置吗？"
        },
        "inputDescription": {
            "content": "第1行为一个整数t (1 ≤ t ≤ 100),表示测试数据的个数，接下来为t组测试数据，每组测试数据中，\n第1行为两个整数m, n (1 ≤ m, n ≤ 100),分别表示迷宫的行数和列数，接下来m行，每行包括n个字符，其中字符'.'表示该位置为空地，字符'*'表示该位置为障碍，输入数据中只有这两种字符，每组测试数据的最后一行为5个整数k, x1, y1, x2, y2 (1 ≤ k ≤ 10, 1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m),其中k表示PIPI最多能转的弯数，(x1, y1), (x2, y2)表示两个位置，其中x1，x2对应列，y1, y2对应行。"
        },
        "outputDescription": {
            "content": "每组测试数据对应为一行，若PIPI能从一个位置走到另外一个位置，输出“yes”，否则输出“no”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n5 5\n...**\n*.**.\n.....\n.....\n*....\n1 1 1 1 3\n5 5\n...**\n*.**.\n.....\n.....\n*....\n2 1 1 1 3"
                },
                "output": {
                    "content": "no\nyes"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 98
    },
    {
        "title": "可乐",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "猪年快乐！在这个快乐的日子里我们当然要去超市买可乐喝啦!?\n现在超市有n种可乐，第 i 种可乐的价格为C[i] ，体积为 2i-1?毫升，每种可乐都是无限供应的 ，现在你想买至少 L毫升的可乐 ，作为一个省钱小能手，聪明的你能够想到最少要花多少钱吗?"
        },
        "inputDescription": {
            "content": "输入包含多组测试用例。 \n每组测试用例第一行包含两个数字 n 和 L (1?≤?n?≤?30; 1?≤?L?≤?10^9) ， n是可乐的种类数， L是我们最终要买的可乐体积。 \n第二行包含 n 个数字 C1，C2,...Cn n (1?≤?ci?≤?10^9) ,代表每一种可乐的价格。"
        },
        "outputDescription": {
            "content": "输出一个数字 ， 购买至少L毫升的可乐需要的最少花费。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 12\n20 30 70 90\n4 3\n10000 1000 100 10\n4 3\n10 100 1000 10000"
                },
                "output": {
                    "content": "150\n10\n30"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 99
    },
    {
        "title": "选球问题",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小诺现有a-z共26种球，权值从a到z依次为1,2,3...26,现从已有的n个球中选出固定k个从左到右排列，要求右边的球权值至少比左边大2，在给定n和k的情况下，求最小权重和。"
        },
        "inputDescription": {
            "content": "输入包含多组数据。 \n每组数据第一行包含两个整数 n,k (1<=k<=n<=50) \n第二行是一个长度为n的字符串。"
        },
        "outputDescription": {
            "content": "对于每组样例，输出最小权重和。若不存在输出-1."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 3\nxyabd"
                },
                "output": {
                    "content": "29"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 100
    },
    {
        "title": "模拟出入栈游戏",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "小诺现有a-z 26个小球模拟出入栈操作，小球按照a~z的顺序压入栈，在栈顶的元素可以随时被取出，在游戏开始前给出任意26个字母的一些排列，问是否能够由出栈顺序得到这个排列。"
        },
        "inputDescription": {
            "content": "输入包含多组测试用例。 \n每组测试用例包含26个字母组成的一个序列。"
        },
        "outputDescription": {
            "content": "若出栈顺序合法，输出\"yes\",否则输出\"no\"."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcdefghijklmnopqrstuvwxyz\nzabcdefghijklmnopqrstuvwxy"
                },
                "output": {
                    "content": "yes\nno"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 101
    },
    {
        "title": "爬楼梯游戏",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "现有n阶楼梯，PIPI从第一阶走到第n阶，每次可以跨一阶或者两阶，问PIPI从第一阶走到第n阶总共有多少种可能。为了防止结果过大，需要让结果对p取模。?\nps: p = 1e9+7."
        },
        "inputDescription": {
            "content": "输入包含多组测试用例。（注意：本题数据输入数据组数会非常多） \n每组样例第一行输入楼梯的阶数n。(1<=n<=1000000)"
        },
        "outputDescription": {
            "content": "对于每组样例，输出方案数。最后结果对10^9+7取模。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n2\n3"
                },
                "output": {
                    "content": "1\n2\n3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 102
    },
    {
        "title": "小镇购物",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "CSU镇上有n个商店，n个商店有m条双向小路相连，在这n个商店里共有k种不同商品，每个商店只有一种商品，每条路的权重都为1。现问你从每个商店出发，买够k种商品中的s种商品所需的最小代价,每个商店可以同时派出多个人买不同商品，买够即可。"
        },
        "inputDescription": {
            "content": "输入包含多组测试用例。 \n对于每一组输入包含四个数字n ,m, k,s (1<=n<=m<=1e5 , 1<=s<=k<=min(n,100)) \n分别代表商店数，小路数，商品种数，需要的商品数。 \n接下来n个数 a1,a2...an (1<=ai<=k),ai代表第i个商店的商品编号。 \n接下来m行小路(u,v),u≠v,代表商店u和v之间有小路连接。"
        },
        "outputDescription": {
            "content": "输出n个数字，第i个数字代表从商店i出发买够s种商品所需的最小代价。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 5 4 3\n1 2 4 3 2\n1 2\n2 3\n3 4\n4 1\n4 5\n7 6 3 2\n1 2 3 3 2 2 1\n1 2\n2 3\n3 4\n2 5\n5 6\n6 7"
                },
                "output": {
                    "content": "2 2 2 2 3 \n1 1 1 2 2 1 1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 103
    },
    {
        "title": "graph's connected components(弱化版)",
        "sourceUniversity": "中南大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given an integers set of m integers,each integer is in the range [0, 2n-1].?\nA graph is build on the following constraints: if integers X and Y satisfy X&Y=0 (& is bitwise AND operation),X and Y are connected by an undirected edge.Please help PIPI count the number of connected components in the graph!"
        },
        "inputDescription": {
            "content": "Input contains multiple test cases. \nEach test case starts with a number n(0 <= n <= 12) and m(1<=m<=2^n) . \nThe next line contains m different integers: a1,a2...am ,each integer 0<=ai <2^n."
        },
        "outputDescription": {
            "content": "For each case,print connected components for each group of input data."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 3\n1 2 3\n5 5\n5 19 10 20 12\n5 6\n5 19 10 20 12 0"
                },
                "output": {
                    "content": "2\n2\n1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 104
    },
    {
        "title": "graph's connected components",
        "sourceUniversity": "中南大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given an integers set of m integers,each integer is in the range [0, 2n-1].?\nA graph is build on the following constraints: if integers X and Y satisfy X&Y=0 (& is bitwise AND operation),X and Y are connected by an undirected edge.Please help PIPI count the number of connected components in the graph!"
        },
        "inputDescription": {
            "content": "Input contains multiple test cases. \nEach test case starts with a number n(0 <= n <= 22) and m(1<=m<=2^n) . \nThe next line contains m different integers: a1,a2...am ,each integer 0<=ai <2^n."
        },
        "outputDescription": {
            "content": "For each case,print connected components for each group of input data."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 3\n1 2 3\n5 5\n5 19 10 20 12\n5 6\n5 19 10 20 12 0"
                },
                "output": {
                    "content": "2\n2\n1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 105
    },
    {
        "title": "素数",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数n(2<=n<=10000)，要求输出所有从1到这个整数之间(不包括1和这个整数)个位为1的素数，如果没有则输出-1。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组一行，输入n。"
        },
        "outputDescription": {
            "content": "输出所有从1到这个整数之间(不包括1和这个整数)个位为1的素数(素数之间用空格隔开，最后一个素数后面没有空格)，如果没有则输出-1。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "100"
                },
                "output": {
                    "content": "11 31 41 61 71"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 106
    },
    {
        "title": "旋转矩阵 - 北航",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "任意输入两个9阶以下矩阵，要求判断第二个是否是第一个的旋转矩阵，如果是，输出旋转角度（0、90、180、270），如果不是，输出-1。 要求先输入矩阵阶数，然后输入两个矩阵，每行两个数之间可以用任意个空格分隔。行之间用回车分隔，两个矩阵间用任意的回车分隔。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组数据第一行输入n(1<=n<=9)，从第二行开始输入两个n阶矩阵。"
        },
        "outputDescription": {
            "content": "判断第二个是否是第一个的旋转矩阵，如果是，输出旋转角度（0、90、180、270），如果不是，输出-1。\n如果旋转角度的结果有多个，则输出最小的那个。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n1 2 3\n4 5 6\n7 8 9\n7 4 1\n8 5 2\n9 6 3"
                },
                "output": {
                    "content": "90"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 107
    },
    {
        "title": "字符串匹配",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "读入数据string[ ]，然后读入一个短字符串。要求查找string[ ]中和短字符串的所有匹配，输出行号、匹配字符串。匹配时不区分大小写，并且可以有一个用中括号表示的模式匹配。如“aa[123]bb”，就是说aa1bb、aa2bb、aa3bb都算匹配。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组数据第一行输入n(1<=n<=1000)，从第二行开始输入n个字符串（不含空格），接下来输入一个匹配字符串。"
        },
        "outputDescription": {
            "content": "输出匹配到的字符串的行号和该字符串（匹配时不区分大小写）。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\nAab\na2B\nab\nABB\na[a2b]b"
                },
                "output": {
                    "content": "1 Aab\n2 a2B\n4 ABB"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 108
    },
    {
        "title": "迭代求立方根",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "立方根的逼近迭代方程是 y(n+1) = y(n)*2/3 + x/(3*y(n)*y(n)),其中y0=x.求给定的x经过n次迭代后立方根的值。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组一行，输入x n。"
        },
        "outputDescription": {
            "content": "迭代n次后的立方根，double精度,保留小数点后面六位。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4654684 1\n65461 23"
                },
                "output": {
                    "content": "3103122.666667\n40.302088"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 109
    },
    {
        "title": "等差序列",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定闭区间[a,b] ,要求输出 连续的素数的等差序列,三个以上才算是序列，例如 [100,200] 会输出 151 157 163,再例如输入[1,100]? 会有两个等差序列，3 5 7 和47 53 59。输出样式行末的空格保留。"
        },
        "inputDescription": {
            "content": "输入两个正整数a和b，其中a和b小于等于10000。"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "141 400"
                },
                "output": {
                    "content": "151 157 163 \n167 173 179\n199 211 223 \n251 257 263 269 \n367 373 379"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 110
    },
    {
        "title": "三叉树",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "一个关于三叉树的题目，小于100的值代表树叶，大于100的值为分支点，建树的过程是水平方向建树，,输入格式：,先输入n，代表有n组数据，接下来n行，输入4个数，第一个数代表根节点，接下来分别代表三个子节点，-1代表子节点不存在，输入的顺序按照层次遍历的次序。接下来，要求寻找叶子节点的最短路径，最短路径是指不经过重复的边。输入方式，首先输入一个值m，代表m行，接下来m行输入m个叶子节点和对应的优先级，要求按优先级输出从上次到达的位置到该节点的最短路径，每条路径的最后一个节点要求输出目标叶子节点，最后要求回到根节点。"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "10\n100 101 108 107\n101 1 102 2\n108 103 104 105\n107 17 109 18\n102 3 4 5\n103 7 8 9\n104 10 106 11\n105 15 16 -1\n109 19 20 21\n106 12 13 14\n5\n8 1\n14 3\n16 2\n5 0\n19 4"
                },
                "output": {
                    "content": "100 101 102 5\n102 101 100 108 103 8\n103 108 105 16\n105 108 104 106 14\n106 104 108 100 107 109 19\n109 107 100"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 111
    },
    {
        "title": "连续合数段",
        "sourceUniversity": "北京航空航天大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定区间[a,b],输出这个区间里最长的连续合数段"
        },
        "inputDescription": {
            "content": "输入两个整数a和b，a,b<=10000"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 10"
                },
                "output": {
                    "content": "8 9 10"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 112
    },
    {
        "title": "判断回文数",
        "sourceUniversity": "厦门大学2017年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "第一题判断一个整数是否为回文数。,例如123321是回文数，123123不是回文数。"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n输入一个整数，不超过10^9。"
        },
        "outputDescription": {
            "content": "对于每一行输入，如果这个数是回文数则输出Yes，如果不是则输出No。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "11\n991"
                },
                "output": {
                    "content": "Yes\nNo"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 113
    },
    {
        "title": "非素数个数",
        "sourceUniversity": "厦门大学2017年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求a-b之间的非素数个数,特别的，1也算作素数，区间是[a, b]。"
        },
        "inputDescription": {
            "content": "多组测试数据。\n输入两个正整数数a,b，其中a<=b<=10^7。"
        },
        "outputDescription": {
            "content": "输出答案。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 10\n1 100"
                },
                "output": {
                    "content": "5\n74"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 114
    },
    {
        "title": "十六进制不进位加法",
        "sourceUniversity": "厦门大学2017年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "16进制不进位的加法，即和正常加法类似，只是不用去计算进位的数，比正常的加法更简单。,如A + 6 = 0（正常加法是10，但是由于不进位所以只有0）"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n输入两个十六进制数，字母可能大写也可能小写。"
        },
        "outputDescription": {
            "content": "输出不进位加法的结果，字母要求统一大写。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "123 456\na A"
                },
                "output": {
                    "content": "579\n4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 115
    },
    {
        "title": "最大子串和",
        "sourceUniversity": "厦门大学复试机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入n个整数的序列，求它的最大子串和，并输出对应的数。"
        },
        "inputDescription": {
            "content": "多组测试数据。\n第一行输入一个整数n（0<n<=100）。\n接下来一行输入n个数用空格隔开，保证每个数的绝对值小于1000。"
        },
        "outputDescription": {
            "content": "第一行输出所求子串的序列，如果有多个答案，输出靠前的答案。\n第二行输出最大子串和。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n-10 5 2 -8 7"
                },
                "output": {
                    "content": "5 2\n7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 116
    },
    {
        "title": "大整数加法",
        "sourceUniversity": "武汉大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "写程序求两个相同位数的大整数之和"
        },
        "inputDescription": {
            "content": "多组数据输入\n两个大整数(位数不超过1000)"
        },
        "outputDescription": {
            "content": "两个大整数的和"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1234567890 1234567890\n111111111111 222222222222"
                },
                "output": {
                    "content": "2469135780\n333333333333"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 117
    },
    {
        "title": "输出图形",
        "sourceUniversity": "武汉大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数n（0<n<10），显示n行如下规律图形。\n例如输入3 ，显示\n1\n2 ? 3\n4 ? 5 ? 6\n例如输入5，显示,1\n2 ? 3\n4 ? 5 ? 6\n7 ? 8???9 ? 10\n11? 12??13??14??15,每个数占4格，不足的话用空格补齐"
        },
        "inputDescription": {
            "content": "输入一个整数n"
        },
        "outputDescription": {
            "content": "输出图形"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3"
                },
                "output": {
                    "content": "1\n2   3\n4   5   6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 118
    },
    {
        "title": "调整方阵 - 武汉大学",
        "sourceUniversity": "武汉大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对一个N阶方阵进行如下操作：,1.将第一列中最大数所在的行与第一行对调。,2.将第二列中从第二行到第N行最大数所在的行与第二行对调。,依此类推...,N-1.将第N-1列中从第N-1行到第N行最大数所在的行与第N-1行对调。,然后，输出这个方阵。"
        },
        "inputDescription": {
            "content": "第一行为一个整数N，表示方阵的阶数。\n接下来输入这个N阶方阵。"
        },
        "outputDescription": {
            "content": "输出调整后的方阵。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n3 6 8 7\n6 7 5 3\n8 6 5 3\n9 8 7 2"
                },
                "output": {
                    "content": "9 8 7 2\n6 7 5 3\n3 6 8 7\n8 6 5 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 119
    },
    {
        "title": "回文质数",
        "sourceUniversity": "武汉大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "因为151既是一个质数又是一个回文数（从左到右和从右到左看是一样的），所以151是回文质数。,写一个程序来找出范围[a,b]间的所有回文质数。其中a，b由键盘输入。"
        },
        "inputDescription": {
            "content": "输入一个整数a和b，其中a<b。"
        },
        "outputDescription": {
            "content": "输出[a,b]范围内的回文质数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 100"
                },
                "output": {
                    "content": "2\n3\n5\n7\n11"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 120
    },
    {
        "title": "数字计数",
        "sourceUniversity": "武汉大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定两个正整数a和b，求在[a，b]中的所有整数中，每个数字（0~9）各出现了多少次。"
        },
        "inputDescription": {
            "content": "分别输入两个正整数a，b。其中a<b。\n其中a,b<=10^18"
        },
        "outputDescription": {
            "content": "分别输出十个数字（0~9）出现的次数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 99"
                },
                "output": {
                    "content": "9 20 20 20 20 20 20 20 20 20"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 121
    },
    {
        "title": "求矩阵的鞍点",
        "sourceUniversity": "四川大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "鞍点，即该位置上的元素在该行上最大，在该列上最小。有可能有多个鞍点，也可能没有鞍点。"
        },
        "inputDescription": {
            "content": "输入两个整数n和m，表示n行m列的矩阵（n,m < 10）。\n接下来输入矩阵。"
        },
        "outputDescription": {
            "content": "按样例格式输出鞍点（坐标和值）。\n如果没有鞍点则输出NO。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4"
                },
                "output": {
                    "content": "1 4 4\n2 4 4\n3 4 4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 122
    },
    {
        "title": "单链表节点交换",
        "sourceUniversity": "四川大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个单链表，将奇数位置上的节点与偶数位置上的节点进行交换，然后输出交换之后的链表。"
        },
        "inputDescription": {
            "content": "输入一个数n（n<100），表示节点数量，然后输入n个数。"
        },
        "outputDescription": {
            "content": "输出结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 2 3 4 5"
                },
                "output": {
                    "content": "2 1 4 3 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 123
    },
    {
        "title": "川大2019 Problem A",
        "sourceUniversity": "四川大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个长度为??数组，将其中第偶数位置的元素与前一个元素交换。"
        },
        "inputDescription": {
            "content": NaN
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 2 3 4 5"
                },
                "output": {
                    "content": "2 1 4 3 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 124
    },
    {
        "title": "括号的匹配",
        "sourceUniversity": "中山大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "题意描述： 在算术表达式中，除了加、减、乘、除等运算外，往往还有括号。包括有大括号{}，中括号[]，小括号()，尖括号<>等。 对于每一对括号，必须先左边括号，然后右边括号；如果有多个括号，则每种类型的左括号和右括号的个数必须相等；对于多重括号的情形，按运算规则，从外到内的括号嵌套顺序为：大括号->中括号->小括号->尖括号。例如，{[()]}，{()},{{}}为一个合法的表达式，而([{}])，{([])},[{<>}]都是非法的。"
        },
        "inputDescription": {
            "content": "文件的第一行为一个整数n（1≤n≤100），接下来有n行仅由上述四类括号组成的括号表达式。第i+1行表示第i个表达式。每个括号表达式的长度不超过255。"
        },
        "outputDescription": {
            "content": "在输出文件中有N行，其中第I行对应第I个表达式的合法性，合法输出YES，非法输出NO。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n{[(<>)]}\n[()]\n<>()[]{}\n[{}]\n{()}"
                },
                "output": {
                    "content": "YES\nYES\nYES\nNO\nYES"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 125
    },
    {
        "title": "确定比赛名次",
        "sourceUniversity": "中山大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有N个比赛队（1<=N<=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。"
        },
        "inputDescription": {
            "content": "输入有若干组，每组中的第一行为二个数N（1<=N<=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。"
        },
        "outputDescription": {
            "content": "给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。\n\n其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 3\n1 2\n2 3\n4 3"
                },
                "output": {
                    "content": "1 2 4 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 126
    },
    {
        "title": "不连续1的子串",
        "sourceUniversity": "中山大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "串只包含0或者1，给定一个数字，输出以此为长度的01串不含连续1的串的个数。\n如输入3，则输出5，因为长度为3的01串不含连续1的串包括000, 001, 010, 100, 101。"
        },
        "inputDescription": {
            "content": "输入一个整数N（N<=20）"
        },
        "outputDescription": {
            "content": "输出结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3"
                },
                "output": {
                    "content": "5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 127
    },
    {
        "title": "循环移位",
        "sourceUniversity": "中山大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出字符串A和B，判断A是否是B的进行循环移位得到的子串。\n如A = “ABC”，B = “BCDEFA”， 则是。"
        },
        "inputDescription": {
            "content": "多组输入\n输入两个字符串A和B"
        },
        "outputDescription": {
            "content": "如果是循环移位子串输出yes，否则输出no"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ABC BCDEFA\nABC BADEFC"
                },
                "output": {
                    "content": "yes\nno"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 128
    },
    {
        "title": "天津大学-进制转换",
        "sourceUniversity": "天津大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个十进制数转换成八进制。"
        },
        "inputDescription": {
            "content": "十进制数字"
        },
        "outputDescription": {
            "content": "八进制数字"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "150"
                },
                "output": {
                    "content": "226"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 129
    },
    {
        "title": "天津大学-比他小的数",
        "sourceUniversity": "天津大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入由一行整数构成的数组，输出数组中小于某个整数的数字的个数。"
        },
        "inputDescription": {
            "content": "第一行输入两个整数n（n<1000000），m\n第二行输入n个整数"
        },
        "outputDescription": {
            "content": "输出数组中小于m的数的个数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7 5\n1 4 3 9 5 6 6"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 130
    },
    {
        "title": "天津大学-计算表达式",
        "sourceUniversity": "天津大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入字符串的中缀表达式,包含‘+’、‘-’、‘*’、‘/’、‘(’、‘)’，输出运算结果。"
        },
        "inputDescription": {
            "content": "字符串的中缀表达式"
        },
        "outputDescription": {
            "content": "计算结果"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3+(5-3)*2"
                },
                "output": {
                    "content": "7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 131
    },
    {
        "title": "Hanoi塔问题",
        "sourceUniversity": "复旦大学2014年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "(n阶Hanoi塔问题）假设有三个分别命名为A、B、C的塔座，在塔座A上插有n(n<20)个直径大小各不相同、依小到大编号为1，2，…，n的圆盘。现要求将A轴上的n个圆盘移至塔座C上并仍按同样顺序叠排，圆盘移动时必须遵循下列规则： 1）每次只能移动一个圆盘； 2）圆盘可以插在A、B、C中的任一塔座上； 3）任何时刻都不能将一个较大的圆盘压在较小的圆盘之上。 请通过编程来打印出移动的步骤."
        },
        "inputDescription": {
            "content": "只有一组输入数据.输入数据N(;表示在开始时A塔座上的盘子数),当输入0时程序结束."
        },
        "outputDescription": {
            "content": "输出移动的步骤.如\"A-->C\",\"A-->B\"等.每两的步骤之间有三个空格隔开,每输出5个步骤就换行.详细的见Sample Output."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n2\n0"
                },
                "output": {
                    "content": "A-->C   A-->B   C-->B   A-->C   B-->A   \nB-->C   A-->C   A-->B   C-->B   C-->A   \nB-->A   C-->B   A-->C   A-->B   C-->B   \nA-->C   B-->A   B-->C   A-->C   B-->A   \nC-->B   C-->A   B-->A   B-->C   A-->C   \nA-->B   C-->B   A-->C   B-->A   B-->C   \nA-->C   \nA-->B   A-->C   B-->C"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 132
    },
    {
        "title": "字符串编辑距离",
        "sourceUniversity": "四川大学2019/复旦大学2014年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "问题描述：给定两个字符串A和B，求字符串A至少经过多少步字符操作变成字符串B。,我们先以一个例子分析，比如eat变成tea。对于第一个字符，e != a，所以要想让这两个字符相等，有三种可以选择的办法"
        },
        "inputDescription": {
            "content": "输入字符串A和B(长度小于1000)"
        },
        "outputDescription": {
            "content": "输出最少经过多少步可以将A变成B"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcd\nabc"
                },
                "output": {
                    "content": "1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 133
    },
    {
        "title": "求众数",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "众数就是一个序列中出现次数最多的数字。 如果不唯一，则输出小的那个值。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数n，表示有n个数\n第二行输入n个整数"
        },
        "outputDescription": {
            "content": "输出数列中的众数，如果不唯一，则输出小的那个值。\n1<=n<=10^5"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n10 3 8 8 3 2 2 2"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 134
    },
    {
        "title": "解一元一次方程",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "解方程，给定一个字符串，代表一个一元一次方程。如果有解求解，输出格式“x=数字“，如果解的个数无穷，输出 “infinite solutions”。如果没有解输出“no solution”，字符串长度不超过 256 。"
        },
        "inputDescription": {
            "content": "见题目"
        },
        "outputDescription": {
            "content": "见题目"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2x+4-3x=x-2"
                },
                "output": {
                    "content": "x=3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 135
    },
    {
        "title": "骨牌",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有2*n 的地板，用1*2和 2*1 的骨牌进行铺地板。问共有多少种情况。结果对 999983 取余，1<=n<=10000"
        },
        "inputDescription": {
            "content": "输入一个整数n"
        },
        "outputDescription": {
            "content": "输出一个整数，表示有多少种情况"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6"
                },
                "output": {
                    "content": "13"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 136
    },
    {
        "title": "集合交并",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个集合，分别求其交集和并集中元素的个数，每个集合中可能存在相同的元素，而最终的交集和并集中应该不存在。"
        },
        "inputDescription": {
            "content": "第一行输入两个整数n，m表示两个集合中元素的个数\n第二行输入n个整数，表示第一个集合中的元素\n第三行输入m个整数，表示第二个集合中的元素"
        },
        "outputDescription": {
            "content": "输出两个整数以空格分开，表示其交集和并集中元素的个数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 5\n3 4 7 3\n4 6 3 2 6"
                },
                "output": {
                    "content": "2 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 137
    },
    {
        "title": "约数求和",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个数n，输出前n个数的约数的和。"
        },
        "inputDescription": {
            "content": "输入一个整数n，1<=n<=1e7"
        },
        "outputDescription": {
            "content": "输出一个整数，前n个数的约数的和。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7"
                },
                "output": {
                    "content": "41"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 138
    },
    {
        "title": "求交点",
        "sourceUniversity": "复旦大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求线段交点，输入两组线段端点，求其交点，若无交点或无穷个交点输出一句\"Parallel or coincident\"，输出交点保留两位小数。"
        },
        "inputDescription": {
            "content": "输入8个数x1,y1,x2,y2,x3,y3,x4,y4，表示两条线的4个点"
        },
        "outputDescription": {
            "content": "输出两条线的交点坐标，保留两位小数。若无交点或无穷个交点输出一句\"Parallel or coincident\""
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "0 0 5 5\n0 2 2 0"
                },
                "output": {
                    "content": "1.00 1.00"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 139
    },
    {
        "title": "长方形中的正方形",
        "sourceUniversity": "复旦大学2015年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出长方形的长和宽，每次从长方形里撕去最大的正方形，输出最后能得到多少正方形"
        },
        "inputDescription": {
            "content": "输入两个整数，n和m，分别表示长方形的长和宽，数在int范围内"
        },
        "outputDescription": {
            "content": "输出一个整数，表示最后能得到多少正方形"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 4"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 140
    },
    {
        "title": "a与b得到c",
        "sourceUniversity": "复旦大学2015年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出a,b,c（3个整数），判断a,b能否通过+-*/得到c，ab可以交换位置，可以输出YES，不可以则输出NO"
        },
        "inputDescription": {
            "content": "输入3个整数a,b,c,数据都在int范围内"
        },
        "outputDescription": {
            "content": "判断a,b能否通过+-*/得到c，ab可以交换位置，可以输出YES，不可以则输出NO"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 8 2"
                },
                "output": {
                    "content": "NO"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 141
    },
    {
        "title": "相隔天数",
        "sourceUniversity": "复旦大学2019年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入日期格式：YYYYMMDD，求与20190205相隔天数。"
        },
        "inputDescription": {
            "content": "见题目"
        },
        "outputDescription": {
            "content": "见题目"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "20190208"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 142
    },
    {
        "title": "复旦-最大连续子序列",
        "sourceUniversity": "复旦大学2019年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个数字序列A1,A2…An，求i,j(1<=i<=j<=n)，使得Ai+…+Aj最大，输出这个最大和。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数n，表示数列大小\n第二行输入n个整数"
        },
        "outputDescription": {
            "content": "输出一个整数，求i,j(1<=i<=j<=n)，使得Ai+…+Aj最大"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n-2 11 -4 13 -5 -2"
                },
                "output": {
                    "content": "20"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 143
    },
    {
        "title": "有向树形态",
        "sourceUniversity": "复旦大学2019年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求N个结点能够组成的二叉树的个数。 1<=n<=20"
        },
        "inputDescription": {
            "content": "见题目"
        },
        "outputDescription": {
            "content": "见题目"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3"
                },
                "output": {
                    "content": "5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 144
    },
    {
        "title": "回文数",
        "sourceUniversity": "重庆大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "判断输入的整数是否回文，输入的数据范围为(10,1000)。“回文数”是一种数字。如:989，这个数字正读是989，倒读也是989，正读倒读一样,所以这个数字就是回文数。"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n输入的数据范围为(10,1000)"
        },
        "outputDescription": {
            "content": "对于每一行输入，如果这个数是回文数则输出true，如果不是则输出false。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "989\n88\n786"
                },
                "output": {
                    "content": "true\ntrue\nfalse"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 145
    },
    {
        "title": "大写字母转换小写字母",
        "sourceUniversity": "重庆大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "计键入任意的字符串，让字符串的大写字符变小写。"
        },
        "inputDescription": {
            "content": "输入一行字符串。"
        },
        "outputDescription": {
            "content": "让字符串的大写字符变小写。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ABCD"
                },
                "output": {
                    "content": "abcd"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 146
    },
    {
        "title": "素数求和",
        "sourceUniversity": "重庆大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "计算100以内的素数和。"
        },
        "inputDescription": {
            "content": "如题。"
        },
        "outputDescription": {
            "content": "如题。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": NaN
                },
                "output": {
                    "content": NaN
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 147
    },
    {
        "title": "计算圆周率",
        "sourceUniversity": "西安交通大学2009机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "按公式求圆周率 π/4 = 1-1/3+1/5-1/7.......。要求精确到小数点后6位"
        },
        "inputDescription": {
            "content": "无"
        },
        "outputDescription": {
            "content": "无"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "无"
                },
                "output": {
                    "content": "无"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 148
    },
    {
        "title": "学生成绩排序",
        "sourceUniversity": "西安交通大学2009机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入n个学生的学号，三门科目的成绩，按总成绩从大到小输出。保证没有总成绩相同的两个人。"
        },
        "inputDescription": {
            "content": "第一行一个n表示学生的数量。n<=100\n接下来n行，每行四个数字，表示学号以及三门科目成绩，以空格分隔。"
        },
        "outputDescription": {
            "content": "总成绩排序后输出"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n0001 100 100 90\n0002 10 10 30\n0003 20 20 30"
                },
                "output": {
                    "content": "0001 100 100 90\n0003 20 20 30\n0002 10 10 30"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 149
    },
    {
        "title": "字符解密",
        "sourceUniversity": "西安交通大学2009机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个字符串，按照a->z,b->y,c->x.........z->a的形式替换原字符串并输出。"
        },
        "inputDescription": {
            "content": "一个字符串。长度不超过10000"
        },
        "outputDescription": {
            "content": "替换后的字符串"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abc"
                },
                "output": {
                    "content": "zyx"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 150
    },
    {
        "title": "矩阵相加",
        "sourceUniversity": "西安交通大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定两个大小位n*m的矩阵，将两个矩阵相加后输出。"
        },
        "inputDescription": {
            "content": "第一行两个数字n和m，表示矩阵的大小。n,m<=100\n接下来的2n行，每行m个数字，前n行表示第一个矩阵的数据。题目保证数据范围相加在int范围内"
        },
        "outputDescription": {
            "content": "相加后的矩阵"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 3\n1 1 1\n1 1 1\n2 2 2\n2 2 2"
                },
                "output": {
                    "content": "3 3 3\n3 3 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 151
    },
    {
        "title": "希尔排序",
        "sourceUniversity": "西安交通大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定n个无序的数字，要求对n个数字用希尔排序并从小到大输出排序后的数组。"
        },
        "inputDescription": {
            "content": "第一行输入一个数字n表示数组的大小n<=1e3。\n接下来n个数字，为需要排序的数组。"
        },
        "outputDescription": {
            "content": "排序后的数组"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 6 2 3 0"
                },
                "output": {
                    "content": "0 1 2 3 6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 152
    },
    {
        "title": "最近的两个点",
        "sourceUniversity": "西安交通大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "随机二维平面的八个点，找出最近的两个点并输出（按出现的顺序输出）。数据范围保证在int内"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 3\n2 4\n5 9\n1 7\n2 6\n2 2\n4 5\n9 9"
                },
                "output": {
                    "content": "1 3\n2 4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 153
    },
    {
        "title": "数组排序",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入个数不限的数字，以逗号为分隔，以回车键为结束，数字大小在[-32768,32767]之间。从小到达排序后以4个数每行输出"
        },
        "inputDescription": {
            "content": "如题目描述"
        },
        "outputDescription": {
            "content": "如题目描述"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "12,34,-12,23,123,56,-9,789"
                },
                "output": {
                    "content": "-12 -9 12 23\n34 56 128 789"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 154
    },
    {
        "title": "重写输入",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个字符串，要求输出能把所有的小写字符放前面，大写字符放中间，数字放后面，并且中间用空格隔开，如果同种类字符间有不同种类的字符，输出后也要用字符隔开。"
        },
        "inputDescription": {
            "content": "一个字符串，长度最大为1000"
        },
        "outputDescription": {
            "content": "如题目描述"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "样例输入1：12abc3KF12\n样例输入2：rwr21r3hello666world"
                },
                "output": {
                    "content": "样例输出1：abc KF 12 3 12\n样例输出2：rwr r hello world 21 3 666"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 155
    },
    {
        "title": "今天是周几",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个合法的日期，判断是周几，（周末输出周日）输入格式为年，月，日例如：1992，10，12.输入保证合法"
        },
        "inputDescription": {
            "content": "一个合法的日期"
        },
        "outputDescription": {
            "content": "判断是周几"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2020,1,12"
                },
                "output": {
                    "content": "星期日"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 156
    },
    {
        "title": "成绩再次排序",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入几行姓名，语数英成绩。先按总分高到低排序，总分一样的按照语文高的排前面，又一样的按照数学，最后英语。若都一样按出现的顺序输出。"
        },
        "inputDescription": {
            "content": "第一行一个数字n，表示学生的个数。\n接下来n行包含姓名，语数英成绩，用空格隔开。（n<=1000）"
        },
        "outputDescription": {
            "content": "排序后的顺序输出"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\nkangkang 60 59 58\nyangyang 60 59 58\njian 70 60 60"
                },
                "output": {
                    "content": "jian 70 60 60\nkangkang 60 59 58\nyangyang 60 59 58"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 157
    },
    {
        "title": "是否存在环",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个有向图，判断图中是否存在环。"
        },
        "inputDescription": {
            "content": "第一行一个数字n表示边的个数。n<=1000\n接下来n行，每行两个数字x,y表示点x和点y存在一条边"
        },
        "outputDescription": {
            "content": "若图中存在环输出\"yes\",否则输出\"no\""
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n0 1\n1 2\n2 0"
                },
                "output": {
                    "content": "yes"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 158
    },
    {
        "title": "凑零钱",
        "sourceUniversity": "华南理工大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "这是一个古老而又经典的问题。用给定的几种钱币凑成某个钱数，一般而言有多种方式。例如：给定了 6 种钱币面值为 2、5、10、20、50、100，用来凑 15 元，可以用 5 个 2 元、1个 5 元，或者 3 个 5 元，或者 1 个 5 元、1个 10 元，等等。显然，最少需要 2 个钱币才能凑成 15 元。你的任务就是，给定若干个互不相同的钱币面值，编程计算，最少需要多少个钱币才能凑成某个给出的钱数。"
        },
        "inputDescription": {
            "content": "第一行是待凑的钱数值 M（1 <= M<= 2000，整数），接着的一行中，第一个整数 K（1 <= K <= 10）表示币种个数，随后是 K个互不相同的钱币面值 Ki(1 <= Ki <= 1000)。输入 M=0 时结束。"
        },
        "outputDescription": {
            "content": "每个测试用例输出一行，即凑成钱数值 M 最少需要的钱币个数。如果凑钱失败，输出“Impossible”。你可以假设，每种待凑钱币的数量是无限多的。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "15\n6 2 5 10 20 50 100"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 159
    },
    {
        "title": "Stepping Numbers",
        "sourceUniversity": "南京大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定??，问??中的自然数满足下述条件的数有多少个。,条件：数字的任意相邻两位差值都恰好为??，且数字至少有两位。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数T，表示有T组输入。\n接来下一行输入l和r"
        },
        "outputDescription": {
            "content": "输出答案。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n1 10\n1 100"
                },
                "output": {
                    "content": "1\n17"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 160
    },
    {
        "title": "Nodes from the Root",
        "sourceUniversity": "南京大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "There is a binary tree with N nodes indexing from 0 to N-1, where 0 is the root. Each edge of the tree has an integer weight W. At first all the nodes could be reached from the root, through a sequence of edges.\nAn integer threshold X (X >= 0) is used to close the edge, which means that all the edges whose weights are less than X will be closed.\nGiven the tree and an integer Y, please find the minimum threshold X so that the number of nodes reachable from the root (including the root itself) is no more than Y.,表示边权小于??的边都会被关闭，??表示关闭这些边以后从根节点能到达的点的数量不超过??。"
        },
        "inputDescription": {
            "content": "The first line is an interger T, indicating the number of test cases.\nThen in each case:\nThe first line contains one integer N (N ≤ 2e4), representing the number of nodes in the tree.\nThe second line contains one integer Y (0 ≤ Y ≤ N), representing the maximum number of nodes allowed to be reachable from the root. \nEach of the following N-1 lines contains three integers U, V (0 ≤ U, V < N), W(0 ≤ W ≤ 1e7), representing that the edge between node U and node V has a weight W. The integers are separated by a space.\nThe total sum of N in all cases is less than 1e5."
        },
        "outputDescription": {
            "content": "T lines and each line contains an integer, representing the minimum threshold X (X≥0).\nSample Input"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n3 2\n0 1 2\n0 2 3\n6 3\n0 1 8\n0 2 3\n1 3 2\n1 4 5\n2 5 6"
                },
                "output": {
                    "content": "3\n4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 161
    },
    {
        "title": "Distinct Subsequences",
        "sourceUniversity": "南京大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Given a string S and a string T, count the number of distinct subsequences of S which is equal to T.\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"nus\" is a subsequence of \"njucs\" while \"nsu\" is not).,翻译：给定两个串??（??串每一个字符都是随机得到的），问??串中有多少个子序列等于??。"
        },
        "inputDescription": {
            "content": "The first line is an interger Q（ Q = 50 ）, indicating the number of test cases.\nThen in each case:\nThe first line is the string S, and the second line is the string T. ( 0 < |S|, |T| ≤ 1e4 )\nThe data guarantee every character of T is randomly generated."
        },
        "outputDescription": {
            "content": "Q lines and each line contains an interger P, representing the number of different subsequences of S which is equal to T.\nSince P maybe very large, you should output it after module 1000000007(1e9+7)."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\naaabbb\nab\nnjnunju\nnju"
                },
                "output": {
                    "content": "9\n5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 162
    },
    {
        "title": "A除以B",
        "sourceUniversity": "北京师范大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "(原题考点大数除法，替换为PAT乙级1017),本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。"
        },
        "inputDescription": {
            "content": "输入在一行中依次给出 A 和 B，中间以 1 空格分隔。"
        },
        "outputDescription": {
            "content": "在一行中依次输出 Q 和 R，中间以 1 空格分隔。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "123456789050987654321 7\n0123 2"
                },
                "output": {
                    "content": "17636684150141093474 3\n61 1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 163
    },
    {
        "title": "砍树",
        "sourceUniversity": "北京师范大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "多组测试用例，每组测试用例给出不超过1000课树，并且第二行给出每颗树的高度，初始时，相邻两个树的距离都相等，需要砍掉最少的树使得这些树高度呈现非递减的序列并且相邻之间距离要相等，输出最少砍的树的数组。"
        },
        "inputDescription": {
            "content": "输入树的棵树n，然后在接下来的一行输入n个正整数表示树的高度，整数之间以空格为间隔。"
        },
        "outputDescription": {
            "content": "最少砍掉的树的颗数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n6 5 4 3 2 1\n10\n1 9 2 8 3 2 4 6 5 2\n5\n1 2 6 2 4"
                },
                "output": {
                    "content": "5\n5\n2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 164
    },
    {
        "title": "最少交换次数",
        "sourceUniversity": "北京师范大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对一个无序序列进行排序，要求一次只能交换相邻两个数，那么最少需要交换多少次才可以完成排序呢？,请你求出一个待排序序列的最少交换次数和对应的逆序列。,本问题假设序列所有数各不相同。"
        },
        "inputDescription": {
            "content": "输入数组序列元素的个数n，在接下来的一行输入n个待排序的数字，数字之间以空格为间隔。"
        },
        "outputDescription": {
            "content": "第一行输出逆序列\n第二行输出 逆序数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n4 8 2 7 5 6 1 3"
                },
                "output": {
                    "content": "6 2 5 0 2 2 1 0\n18"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 165
    },
    {
        "title": "命名法",
        "sourceUniversity": "北京师范大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "驼峰式命名法：当变量名或函数名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像骆驼峰一样此起彼伏，故得名。,下划线命名法：名称中的每一个逻辑点都用一个下划线来标记，例如：print_employee。下划线命名法是随着C语言的出现流行起来的，在UNIX/LINUX这样的环境，以及GUN代码中使用非常普遍。"
        },
        "inputDescription": {
            "content": "输入一个驼峰式命名法命名"
        },
        "outputDescription": {
            "content": "输出对应的下划线命名"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "myFirstName\nmyLastName"
                },
                "output": {
                    "content": "my_first_name\nmy_last_name"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 166
    },
    {
        "title": "简单的分数求和",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个N,然后输出值：1+1/2+1/3+……+1/n,保留5位小数"
        },
        "inputDescription": {
            "content": "见样例"
        },
        "outputDescription": {
            "content": "见样例"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3"
                },
                "output": {
                    "content": "1.83333"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 167
    },
    {
        "title": "字符串的差",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个字符串，输出两字符串的差"
        },
        "inputDescription": {
            "content": "见样例"
        },
        "outputDescription": {
            "content": "见样例"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcd\nad"
                },
                "output": {
                    "content": "bc"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 168
    },
    {
        "title": "质数的个数",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求[1,n]之间的质数的个数。"
        },
        "inputDescription": {
            "content": "输入一个整数n，1<=n<=1e7"
        },
        "outputDescription": {
            "content": "输出一个整数，表示[1,n]之间的质数的个数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "10"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 169
    },
    {
        "title": "整数序列",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "很多整数可以由一连串的整数序列相加而成，比如25=3+4+5+6+7=12+13，输入一个整数N，输出N的全部整数序列，如果没有输出\"NONE”。2<=n<=1e7"
        },
        "inputDescription": {
            "content": "见样例"
        },
        "outputDescription": {
            "content": "见样例"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "25"
                },
                "output": {
                    "content": "3 4 5 6 7\n12 13"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 170
    },
    {
        "title": "插入乘号",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个长度为n的数字串，向里面插入k个乘号(k<n),输出最大值"
        },
        "inputDescription": {
            "content": "第一行输入两个整数n，k（n为数字串长度，k为插入乘号的个数,1<=n<=10）\n第二行输入长度为n的一个数字序列"
        },
        "outputDescription": {
            "content": "输出插入k个乘号后的最大值"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 2\n1234"
                },
                "output": {
                    "content": "144"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 171
    },
    {
        "title": "最长递减子序列",
        "sourceUniversity": "山东大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入数字n，和n个整数，输出该数字串中的最长递减序列"
        },
        "inputDescription": {
            "content": "见样例"
        },
        "outputDescription": {
            "content": "见样例"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n9 4 3 2 5 4 3 2"
                },
                "output": {
                    "content": "9 5 4 3 2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 172
    },
    {
        "title": "统计卡牌的值",
        "sourceUniversity": "华东师范大学2020机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "就是输入一个数字n，然后输入n个字符串,每个字符串包含13个字符，有2，3，4，5，6，7，8，9，10，J，Q，K，A,其中J算1分，Q算2分，K算3分，A算4分,输出这些字符加在一起的最终分数"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n2345\nA4J\nAA123020"
                },
                "output": {
                    "content": "13"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 173
    },
    {
        "title": "求30的倍数",
        "sourceUniversity": "华东师范大学2020年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "就是输入一个数，比如201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30的倍数，就输出最大的倍数，不能就输出-1；,例如输入201你可以随意组合成,201，210，012，021，102，120等数字,其中120，210都是30的倍数，由于要找最大的，所以答案是210"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "201"
                },
                "output": {
                    "content": "210"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 174
    },
    {
        "title": "骑车路线",
        "sourceUniversity": "华东师范大学2020年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "Tomislav最近发现自己的身材完全走样了，她走楼梯都变得很累。一天早上她起来以后，她决定恢复姣好的身材。她最喜欢的运动是骑自行车，因此她决定在本地的小山上做一次旅行。,她骑自行车的路线可以描述为N个数字的数列，每个数字表示每一段路地海拔高度。Tomislav最感兴趣的是最长的高度一直上升的子序列，她称这一段路为爬坡，Tomislav只想考虑这段爬坡的高度差（即开始和最后的数字的差距），而不是什么路程长度。,一段爬坡路被定义为至少两个连续的上升数列。例如，我们考虑如下路线数列12 3 5 7 10 6 1 11，这里有两个爬坡，第一个爬坡（3 5 7 10）的高度差是7，第二个爬坡的高度差是10（1 11）。,帮助Tomislav计算高度差最大的爬坡的高度差。"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n第一行是一个正整数N (1<= N <= 1000), 描述了路线数列。\n第二行有N个正整数，每个正整数Pi (1<= Pi <= 1000)表示相应路段的海拔高度。"
        },
        "outputDescription": {
            "content": "所有爬坡中的最大高度差，如果路线数列里面没有爬坡，就输出0。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 2 1 4 6\n6\n10 8 8 6 4 3"
                },
                "output": {
                    "content": "5\n0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 175
    },
    {
        "title": "字符串查询",
        "sourceUniversity": "华东师范大学2020年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你单词S和Q个询问。每次询问，你会得到正整数A,B,C和D。我们令单词X由S的第A到B个字母组成，单词Y由S的第C到D个字母组成。你需要回答，是否能够重新排列单词Y中的字母，得到单词X。"
        },
        "inputDescription": {
            "content": "第一行一个单词S(1<=|S|<=50000)，仅由小写字母组成。\n第二行一个正整数Q(Q<=Q<=50000).\n接下来Q行，每行四个整数A,B,C,D（1<=A<=B<=|S|，1<=C<=D<=|S|）"
        },
        "outputDescription": {
            "content": "每次询问，如果能，输出“DA”，否则输出“NE”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "kileanimal\n2\n2 2 7 7\n1 4 6 7"
                },
                "output": {
                    "content": "DA\nNE"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 176
    },
    {
        "title": "街灯",
        "sourceUniversity": "华东师范大学2020年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "现在是基督降临节，在长为N米的街道上有M个街灯。每个灯照亮了左边K米，右边K米。也就是说，在X米处的灯，能照亮从X-K到X+K（含）。当然，街道某处可能被多个灯照亮。所有灯位于不同的位置。,问题在于有可能这些灯没法照亮整条街道。你的任务是，确定最少还要加多少灯，使得整条街道都被照亮。,对于样例1，不需要添加额外的灯。,对于样例2，只需一个，比如13。"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n第一行一个整数N（1<=N<=1000）。\n第二行一个整数M（1<=M<=N）。\n第三行一个整数K（0<=K<=N）。\n接下来M行，每行一个数，保证这些数按升序排列。他们的位置都是互异的。"
        },
        "outputDescription": {
            "content": "你需要输出所求的数字。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n2\n2\n1\n5"
                },
                "output": {
                    "content": "0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 177
    },
    {
        "title": "复数相加",
        "sourceUniversity": "北京理工大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "编写一个复数类，有构造函数，能对复数初始化；重载加法操作符并按a+bi?的形式输出。"
        },
        "inputDescription": {
            "content": "输入第一行表示测试用例的个数m，接下来m行每行有4个用空格隔开的整数，分别表示2个复数的实部和虚部。"
        },
        "outputDescription": {
            "content": "输出m行。按a+bi或者a-bi的格式输出，表示两个复数相加的和。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n3 4 1 -2"
                },
                "output": {
                    "content": "4+2i"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 178
    },
    {
        "title": "身份证校验",
        "sourceUniversity": "北京理工大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "身份证号的校验身份证号码共18位，最后一位是校验位。,A[18] : aaaaaabbbbbbbbccc d,校验的规则如下：,身份证的前十七位数字和对应的权值相乘后相加后所得的和对11取余的余数与校验位（身份证最后一位）相同则身份证合法。,前十七位的权值分别是：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2,余数x和校验位y的对应规则对应如下：\nx:0 1 2 3 4 5 6 7 8 9 10\ny:1 0 x 9 8 7 6 5 4 3 2"
        },
        "inputDescription": {
            "content": "多组数据输入\n输入身份证号码"
        },
        "outputDescription": {
            "content": "如果所输入身份证号码合法，输出ID Corrent，否则输出ID Wrong。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1222222222\n11111111111111111111\n341181198809150011\n11010119900307387X\n150102199003075131\n150102200003075131"
                },
                "output": {
                    "content": "ID Wrong\nID Wrong\nID Corrent\nID Corrent\nID Corrent\nID Wrong"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 179
    },
    {
        "title": "计算日期2",
        "sourceUniversity": "中国海洋大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个年份?y?和一个整数?d，问这一年的第?d?天是几月几日？\n注意闰年的?2?月有?29?天。满足下面条件之一的是闰年：\n1） 年份是?4?的整数倍，而且不是?100?的整数倍；\n2） 年份是?400?的整数倍。"
        },
        "inputDescription": {
            "content": "输入的第一行包含一个整数 y，表示年份，年份在 1900 到 2015 之间（包含 1900 和 2015）。\n输入的第二行包含一个整数 d， d 在 1 至 365 之间。"
        },
        "outputDescription": {
            "content": "输出两行，每行一个整数，分别表示答案的月份和日期。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2015\n80"
                },
                "output": {
                    "content": "3\n21"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 180
    },
    {
        "title": "交通规划",
        "sourceUniversity": "中国海洋大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "G 国国王来中国参观后，被中国的高速铁路深深的震撼，决定为自己的国家也建设一个高速铁路系统。建设高速铁路投入非常大，为了节约建设成本， G 国国王决定不新建铁路，而是将已有的铁路改造成高速铁路。现在，请你为 G 国国王提供一个方案，将现有的一部分铁路改造成高速铁路，使得任何两个城市间都可以通过高速铁路到达，而且从所有城市乘坐高速铁路到首都的最短路程和原来一样长。请你告诉 G 国国王在这些条件下最少要改造多长的铁路。"
        },
        "inputDescription": {
            "content": "输入的第一行包含两个整数 n, m，分别表示 G 国城市的数量和城市间铁路的数量。所有的城市由 1 到 n 编号，首都为 1 号。\n接下来 m 行，每行三个整数 a, b, c，表示城市 a 和城市 b 之间有一条长度为 c 的双向铁路。这条铁路不会经过 a 和 b 以外的城市。"
        },
        "outputDescription": {
            "content": "输出一行，表示在满足条件的情况下最少要改造的铁路长度。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4 5\n1 2 4\n1 3 5\n2 3 2\n2 4 3\n3 4 2"
                },
                "output": {
                    "content": "11"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 181
    },
    {
        "title": "路径解析",
        "sourceUniversity": "中国海洋大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "在操作系统中，数据通常以文件的形式存储在文件系统中。文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。文件有内容，用于存储数据。目录是容器，可包含文件或其他目录。同一个目录下的所有文件和目录的名字各不相同，不同目录下可以有名字相同的文件或目录。,为了指定文件系统中的某个文件，需要用路径来定位。在类 Unix 系统（Linux、Max OS X、 FreeBSD等）中，路径由若干部分构成，每个部分是一个目录或者文件的名字，相邻两个部分之间用 / 符号分隔。,有一个特殊的目录被称为根目录，是整个文件系统形成的这棵树的根节点，用一个单独的 / 符号表示。,在操作系统中，有当前目录的概念，表示用户目前正在工作的目录。根据出发点可以把路径分为两类：,绝对路径：以 / 符号开头，表示从根目录开始构建的路径。\n相对路径：不以 / 符号开头，表示从当前目录开始构建的路径。\n例如，有一个文件系统的结构如下图所示。在这个文件系统中，有根目录 / 和其他普通目录 d1、 d2、\nd3、 d4，以及文件 f1、 f2、 f3、 f1、 f4。其中，两个 f1 是同名文件，但在不同的目录下。,对于 d4 目录下的 f1 文件，可以用绝对路径 /d2/d4/f1 来指定。如果当前目录是 /d2/d3，这个文件也可以用相对路径 ../d4/f1 来指定，这里 .. 表示上一级目录（注意，根目录的上一级目录是它本身）。还有?.?表示本目录，例如?/d1/./f1?指定的就是?/d1/f1。注意，如果有多个连续的?/?出现，其效果等同于一个?/，例如?/d1///f1?指定的也是?/d1/f1。,本题会给出一些路径，要求对于每个路径，给出正规化以后的形式。一个路径经过正规化操作后，其指定的文件不变，但是会变成一个不包含 . 和 .. 的绝对路径，且不包含连续多个 / 符号。如果一个路径以 / 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 /。若这个路径代表根目录，则正规\n化操作的结果是 /。若路径为空字符串，则正规化操作的结果是当前目录。"
        },
        "inputDescription": {
            "content": "第一行包含一个整数 P，表示需要进行正规化操作的路径个数。\n    第二行包含一个字符串，表示当前目录。\n    以下 P 行，每行包含一个字符串，表示需要进行正规化操作的路径。"
        },
        "outputDescription": {
            "content": "共 P 行，每行一个字符串，表示经过正规化操作后的路径，顺序与输入对应。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7\n/d2/d3\n/d2/d4/f1\n../d4/f1\n/d1/./f1\n/d1///f1\n/d1/\n///\n/d1/../../d2"
                },
                "output": {
                    "content": "/d2/d4/f1\n/d2/d4/f1\n/d1/f1\n/d1/f1\n/d1\n/\n/d2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 182
    },
    {
        "title": "学生排队",
        "sourceUniversity": "中国海洋大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "体育老师小明要将自己班上的学生按顺序排队。他首先让学生按学号从小到大的顺序排成一排，学号小的排在前面，然后进行多次调整。一次调整小明可能让一位同学出队，向前或者向后移动一段距离后再插入队列。,例如，下面给出了一组移动的例子，例子中学生的人数为8人。,0）初始队列中学生的学号依次为1, 2, 3, 4, 5, 6, 7, 8；,1）第一次调整，命令为“3号同学向后移动2”，表示3号同学出队，向后移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 3, 6, 7, 8；,2）第二次调整，命令为“8号同学向前移动3”，表示8号同学出队，向前移动3名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 8, 3, 6, 7；,3）第三次调整，命令为“3号同学向前移动2”，表示3号同学出队，向前移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 3, 5, 8, 6, 7。,小明记录了所有调整的过程，请问，最终从前向后所有学生的学号依次是多少？,请特别注意，上述移动过程中所涉及的号码指的是学号，而不是在队伍中的位置。在向后移动时，移动的距离不超过对应同学后面的人数，如果向后移动的距离正好等于对应同学后面的人数则该同学会移动到队列的最后面。在向前移动时，移动的距离不超过对应同学前面的人数，如果向前移动的距离正好等于对应同学前面的人数则该同学会移动到队列的最前面。"
        },
        "inputDescription": {
            "content": "输入的第一行包含一个整数n，表示学生的数量，学生的学号由1到n编号。\n    第二行包含一个整数m，表示调整的次数。\n    接下来m行，每行两个整数p, q，如果q为正，表示学号为p的同学向后移动q，如果q为负，表示学号为p的同学向前移动-q。\n其中，n，m=100"
        },
        "outputDescription": {
            "content": "输出一行，包含n个整数，相邻两个整数之间由一个空格分隔，表示最终从前向后所有学生的学号。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n3\n3 2\n8 -3\n3 -2"
                },
                "output": {
                    "content": "1 2 4 3 5 8 6 7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 183
    },
    {
        "title": "无线网络",
        "sourceUniversity": "中国海洋大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "目前在一个很大的平面房间里有 n 个无线路由器,每个无线路由器都固定在某个点上。任何两个无线路由器只要距离不超过 r 就能互相建立网络连接。,除此以外,另有 m 个可以摆放无线路由器的位置。你可以在这些位置中选择至多 k 个增设新的路由器。,你的目标是使得第 1 个路由器和第 2 个路由器之间的网络连接经过尽量少的中转路由器。请问在最优方案下中转路由器的最少个数是多少?"
        },
        "inputDescription": {
            "content": "第一行包含四个正整数 n,m,k,r。(2 ≤ n ≤ 100,1 ≤ k ≤ m ≤ 100, 1 ≤ r ≤ 108)。 \n　　接下来 n 行,每行包含两个整数 xi 和 yi,表示一个已经放置好的无线 路由器在 (xi, yi) 点处。输入数据保证第 1 和第 2 个路由器在仅有这 n 个路由器的情况下已经可以互相连接(经过一系列的中转路由器)。 \n　　接下来 m 行,每行包含两个整数 xi 和 yi,表示 (xi, yi) 点处可以增设 一个路由器。 \n　　输入中所有的坐标的绝对值不超过 108,保证输入中的坐标各不相同。"
        },
        "outputDescription": {
            "content": "输出只有一个数,即在指定的位置中增设 k 个路由器后,从第 1 个路 由器到第 2 个路由器最少经过的中转路由器的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 3 1 3\n0 0\n5 5\n0 3\n0 5\n3 5\n3 3\n4 4\n3 0"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 184
    },
    {
        "title": "完数",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "一个数如果恰好等于它的因子之和，这个数就称为\"完数\"。 例如，6的因子为1、2、3，而6=1+2+3，因此6是\"完数\"。 编程序找出N之内的所有完数，并按下面格式输出其因子："
        },
        "inputDescription": {
            "content": "N"
        },
        "outputDescription": {
            "content": "? its fastors are ? ? ?"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1000"
                },
                "output": {
                    "content": "6 its fastors are 1 2 3\n28 its fastors are 1 2 4 7 14\n496 its fastors are 1 2 4 8 16 31 62 124 248"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 185
    },
    {
        "title": "猴子报数",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "n个猴子围坐一圈并按照顺时针方向从1到n编号，从第s个猴子开始进行1到m的报数，报数到第m的猴子退出报数，从紧挨它的下一个猴子重新开始1到m的报数，如此进行下去知道所有的猴子都退出为止。求给出这n个猴子的退出的顺序表。"
        },
        "inputDescription": {
            "content": "有做组测试数据．每一组数据有两行，第一行输入n（表示猴子的总数最多为100）第二行输入数据s(从第s个猴子开始报数)和数据m(第m个猴子退出报数)．当输入０　０　０时表示程序结束．"
        },
        "outputDescription": {
            "content": "每组数据的输出结果为一行，中间用逗号间隔。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "10\n2 5 \n5\n2 3 \n0\n0 0"
                },
                "output": {
                    "content": "6,1,7,3,10,9,2,5,8,4\n4,2,1,3,5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 186
    },
    {
        "title": "素数判定",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你两个数a、b,现在的问题是要判断这两个数组成的区间内共有多少个素数"
        },
        "inputDescription": {
            "content": "多组测试数据。 每个测试数据输入两个数a、b。(2<=a,b<=1000)"
        },
        "outputDescription": {
            "content": "输出该区间内素数的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 4\n4 6"
                },
                "output": {
                    "content": "2\n1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 187
    },
    {
        "title": "求三角形的面积",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出一个三角形的三个点在平面内的坐标。,请你来求一求这个三角形的面积是多少。"
        },
        "inputDescription": {
            "content": "多组输入。\n每行有6个整数。\n前面两个整数是一个点的坐标。\n中间两个整数是另一个点的坐标。\n最后两个整数是最后一个点的坐标。"
        },
        "outputDescription": {
            "content": "三角形的面积，保留两位小数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "0 0 2 0 0 1\n1 2 5 9 6 8"
                },
                "output": {
                    "content": "1.00\n5.50"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 188
    },
    {
        "title": "约瑟夫问题",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "n?个人围成一圈，从第一个人开始报数,数到?mm?的人出列，再由下一个人重新从?11?开始报数，数到?mm?的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。"
        },
        "inputDescription": {
            "content": "输入两个整数 n,m。\n1≤m,n≤100"
        },
        "outputDescription": {
            "content": "输出一行 n 个整数，按顺序输出每个出圈人的编号。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "10 3"
                },
                "output": {
                    "content": "3 6 9 2 7 1 8 5 10 4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 189
    },
    {
        "title": "字符串匹配 - 兰州大学",
        "sourceUniversity": "兰州大学2017年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个字符串，分别为模式串和文本串。若模式串是文本串的子字符串，则要求将文本串中的子字符串删除，并返回删除子字符串后的字符串。"
        },
        "inputDescription": {
            "content": "首先输入模式串，然后输入文本串。（均由大写或者小写字母构成，二者以空格为间隔隔开）\n其中，字符串长度不超过100000。"
        },
        "outputDescription": {
            "content": "若模式串是文本串的子字符串，输出删除子字符串后的字符串。\n   若模式串不是文本串的子字符串，输出-1。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "dfg asdfghj"
                },
                "output": {
                    "content": "ashj"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 190
    },
    {
        "title": "字符串压缩",
        "sourceUniversity": "兰州大学2017年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "将形如xxxxxdddfff的字符串，压缩为x5d3f3，字符后面的数字表示前面字符在原字符串中出现的次数。若字符只出现一次，则无需再字符后面加数字。"
        },
        "inputDescription": {
            "content": "输入一个字符串。"
        },
        "outputDescription": {
            "content": "如题输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "xxxxxdddfff"
                },
                "output": {
                    "content": "x5d3f3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 191
    },
    {
        "title": "最大公共子串",
        "sourceUniversity": "兰州大学机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "求两个字符串的最大公共子串，如果没有公共子串输出None"
        },
        "inputDescription": {
            "content": "输入字符串s1和s2\n字符串长度小于100"
        },
        "outputDescription": {
            "content": "输出s1和s2的最大公共子串，如果有多个输出第一个。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "aaaxbbb\naaacbbb"
                },
                "output": {
                    "content": "aaa"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 192
    },
    {
        "title": "字符串删除",
        "sourceUniversity": "兰州大学2017年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "题目描述：输入一个字符串S1，字符串S2，在字符串删除含有字符串S2的子串，输出删除子串的个数num以及最后剩下的字符串S3。\n例如：\n输入:S1：ababababac S2:aba\n输出：num=2;S3=bbac"
        },
        "inputDescription": {
            "content": "如题，字符串长度小于100"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ababababac\naba"
                },
                "output": {
                    "content": "num=2;S3=bbac"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 193
    },
    {
        "title": "比较奇偶数个数",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "第一行输入一个数，为n，第二行输入n个数，这n个数中，如果偶数比奇数多，输出NO，否则输出YES。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组输入n，然后输入n个整数（1<=n<=1000）。"
        },
        "outputDescription": {
            "content": "如果偶数比奇数多，输出NO，否则输出YES。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n1 5 2 4 3"
                },
                "output": {
                    "content": "YES"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 194
    },
    {
        "title": "C翻转",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "首先输入一个5 * 5的数组，然后输入一行，这一行有四个数，前两个代表操作类型，后两个数x y代表需操作数据为以x y为左上角的那几个数据。 操作类型有四种：? 1 2 表示：90度，顺时针，翻转4个数? 1 3 表示：90度，顺时针，翻转9个数? 2 2 表示：90度，逆时针，翻转4个数? 2 3 表示：90度，逆时针，翻转9个数"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组输入一个5 * 5的数组，然后输入一行，这一行有四个数，前两个代表操作类型，后两个数x y代表需操作数据为以x y为左上角的那几个数据。"
        },
        "outputDescription": {
            "content": "输出翻转后的数组。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 2 3 4 5\n6 7 8 9 10\n11 12 13 14 15\n16 17 18 19 20\n21 22 23 24 25\n1 3 1 1"
                },
                "output": {
                    "content": "11 6 1 4 5\n12 7 2 9 10\n13 8 3 14 15\n16 17 18 19 20\n21 22 23 24 25"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 195
    },
    {
        "title": "二进制数",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "大家都知道，数据在计算机里中存储是以二进制的形式存储的。 有一天，小明学了C语言之后，他想知道一个类型为unsigned int 类型的数字，存储在计算机中的二进制串是什么样子的。 你能帮帮小明吗？并且，小明不想要二进制串中前面的没有意义的0串，即要去掉前导0。"
        },
        "inputDescription": {
            "content": "每行有一个数字n（0<=n<=10^8），表示要求的二进制串。"
        },
        "outputDescription": {
            "content": "输出共T行。每行输出求得的二进制串。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "23"
                },
                "output": {
                    "content": "10111"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 196
    },
    {
        "title": "哈夫曼树",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有结点的值与权值的乘积之和。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组第一行输入一个数n，接着输入n个叶节点（叶节点权值不超过100，2<=n<=1000）。"
        },
        "outputDescription": {
            "content": "输出权值。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5  \n1 2 2 5 9"
                },
                "output": {
                    "content": "37"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 197
    },
    {
        "title": "查找 ",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "读入一组字符串（待操作的），再读入一个int n记录记下来有几条命令，总共有2中命令：1、翻转? 从下标为i的字符开始到i+len-1之间的字符串倒序；2、替换? 命中如果第一位为1，用命令的第四位开始到最后的字符串替换原读入的字符串下标 i 到 i+len-1的字符串。每次执行一条命令后新的字符串代替旧的字符串（即下一条命令在作用在得到的新字符串上）。 ? ? 命令格式：第一位0代表翻转，1代表替换；第二位代表待操作的字符串的起始下标int i；第三位表示需要操作的字符串长度int len。"
        },
        "inputDescription": {
            "content": "输入有多组数据。\n每组输入一个字符串（不大于100）然后输入n，再输入n条指令（指令一定有效）。"
        },
        "outputDescription": {
            "content": "根据指令对字符串操作后输出结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "bac\n2\n003\n112as"
                },
                "output": {
                    "content": "cab\ncas"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 198
    },
    {
        "title": "二进制数字翻转",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入数据组数t,每组数据输入一个十进制数x（0<x<2^32），将其二进制位反转（共32位），然后输出对应的十进制数"
        },
        "inputDescription": {
            "content": "如题"
        },
        "outputDescription": {
            "content": "如题"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n2\n3"
                },
                "output": {
                    "content": "1073741824\n3221225472"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 199
    },
    {
        "title": "数字填充",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "用点阵表示数字，5*3的方格表示0~9，具体如下：,0的表示：,111\n101\n101\n101\n111,1的表示：,001\n001\n001\n001\n001,2的表示：,111\n001\n111\n100\n111,9的表示：,111\n101\n111\n001\n111"
        },
        "inputDescription": {
            "content": "输入一个数字串，用点阵输出。"
        },
        "outputDescription": {
            "content": "按题意输出"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2"
                },
                "output": {
                    "content": "111111\n101001\n101111\n101100\n111111"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 200
    },
    {
        "title": "发财数",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "一个大于等于2的整数，如果可以分解为8个或8个以上的素数相乘，则称其为发财数，让你输出第n个发财数"
        },
        "inputDescription": {
            "content": "输入一个整数t，代表有t组数据(t<1000)\n输入一个正整数n，（n<=10000）"
        },
        "outputDescription": {
            "content": "输出第n个发财数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n1"
                },
                "output": {
                    "content": "256"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 201
    },
    {
        "title": "最长平衡串",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定只含01的字符串，找出最长平衡子串的长度（平衡串：包含0和1的个数相同）"
        },
        "inputDescription": {
            "content": "多组测试数据输入。\n输入一串01字符串，字符串长度最大为100000。"
        },
        "outputDescription": {
            "content": "请输出最长的平衡子串的长度。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "101011000"
                },
                "output": {
                    "content": "8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 202
    },
    {
        "title": "三元组",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你一个长度为m的数组（数组元素从0到m-1），如果数组里有a[i]+a[j]==a[k](i,j,k大于等于0并且小于m)，便称之为三元组。现在给你一个数组，让你求三元组的个数。\n例如m为2，里面的元素为（0,0）\n那么三元组为\n（a[0],a[0],a[0]）\n（a[0],a[0],a[1]）\n（a[0],a[1],a[0]）\n（a[0],a[1],a[1]）\n（a[1],a[0],a[0]）\n（a[1],a[0],a[1]）\n（a[1],a[1],a[0]）\n（a[1],a[1],a[1]）\n输出答案为8."
        },
        "inputDescription": {
            "content": "输入正整数N，表示N例测试。接着输入N组数据，每组输入m(1<=m<=50)，表示数组长度，然后输入这个数组。"
        },
        "outputDescription": {
            "content": "对每组输入数据，输出三元组的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n2\n0 0\n5\n1 1 1 2 1"
                },
                "output": {
                    "content": "8\n16"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 203
    },
    {
        "title": "寻找变化前01序列",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "问题描述\n给你一个01序列，HDLC协议处理的话，如果出现连续的5个1会补1个0。例如1111110，会变成11111010。\n现在给你一个经过HDLC处理后的01序列，你需要找到HDLC处理之前的01序列。\n例如给你11111010\n你需要输出1111110"
        },
        "inputDescription": {
            "content": "输入正整数N，表示N例测试。接着输入N组数据，每组输入经过HDLC处理过的01序列（长度小于100）。"
        },
        "outputDescription": {
            "content": "对每组输入数据，输出HDLC处理前的01序列。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n11111010\n1111100"
                },
                "output": {
                    "content": "1111110\n111110"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 204
    },
    {
        "title": "寻找奇特的数",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "3*3的矩阵内容。,1 2 3,2 4 6,3 6 9,即a[i][j](1<=i<=n,1<=j<=n)=i*j。,问一个这样n*n的矩阵里面，里面m出现的次数。,例如n为3,m为6.,那么出现的次数就是2"
        },
        "inputDescription": {
            "content": "输入正整数N，表示N例测试（N<=20）。接着输入n（n<=10^5），m（<=10^9）。"
        },
        "outputDescription": {
            "content": "对每组输入数据，输出m出现的次数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n3 6\n3 3"
                },
                "output": {
                    "content": "2\n2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 205
    },
    {
        "title": "复制、剪切、粘贴",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有以下三种操作。,（1）COPY l r（0<=l<=r<n），n代表s串的长度。这个表示将s串从l到r的序列复制到剪贴板t里面，覆盖t字符串。,例如s为abcde ? ?t为pqr,执行COPY 1 2变为,s为abcde ? ? t为bc,（2）CUT l r（0<=l<=r<n），n代表s串的长度。这个表示将s串从l到r的序列剪切到剪贴板t里面(删除s串中的l到r的序列)，覆盖t字符串。,例如s为abcde ? ?t为pqr,执行CUT 1 2变为,s为ade ? ? t为bc,（3）PASTE p（0<=p<n），n代表s串的长度。这个表示将t串插入到s串p位置的后面。t保持不变。,例如s为abcde ? ?t为pqr,执行PASTE 1 变为,s为abpqrcde,t为pqr"
        },
        "inputDescription": {
            "content": "多组测试数据。\n首先给你s串，再给你一个m，然后给你m个操作。"
        },
        "outputDescription": {
            "content": "对每个操作，输出操作后的s串。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcde\n5\nCUT ?1 2\nCOPY 0 1\nPASTE 1\nPASTE 1\nCUT ?1 3"
                },
                "output": {
                    "content": "ade\nade\nadade\nadadade\naade"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 206
    },
    {
        "title": "Special数",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "设一个正整数既是平方数又是立方数时，称之为Special数。输入包含多组测试用例，第一行输入测试数据的组数，接着在后续每行输入n的时候，请输出1到n中包含的所有Special数的个数。"
        },
        "inputDescription": {
            "content": "输入包含多组测试用例\nn（n<= 1000000000）"
        },
        "outputDescription": {
            "content": NaN
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n1\n64"
                },
                "output": {
                    "content": "1\n2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 207
    },
    {
        "title": "二进制",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有一个长度为32位的二进制数X，对其进行X+1,X+3 操作，并输出。注意不能忽略前导0"
        },
        "inputDescription": {
            "content": "第一行，一个整数T,代表测试数据组数。\n接着T行，输入32为二进制数"
        },
        "outputDescription": {
            "content": "对每组测试数据，输出两行，第一行为X+1,第二行为X+3."
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n00000000000000000000000000000000\n00000000000000000000000000000001"
                },
                "output": {
                    "content": "00000000000000000000000000000001\n00000000000000000000000000000011\n00000000000000000000000000000010\n00000000000000000000000000000100"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 208
    },
    {
        "title": "二叉树",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对二叉树，计算任意两个结点的最短路径长度。"
        },
        "inputDescription": {
            "content": "第一行输入测试数据组数 T\n第二行输入 n , m 。 n 代表输入的数据组数， m 代表要查询的数据组数。\n接下来 n 行，每行输入两个数，代表1~ n 结点的孩子结点，如果没有孩子结点则输入-1，根节点为1。\n接下来 m 行，每行输入两个数，代表要查询的两个结点。"
        },
        "outputDescription": {
            "content": "每组测试数据输出 m 行，代表查询的两个结点之间的最短路径长度。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n8 4\n2 3\n4 5\n6 -1\n-1 -1\n-1 7\n-1 -1\n8 -1\n-1 -1\n1 6\n4 6\n4 5\n8 1"
                },
                "output": {
                    "content": "2\n4\n2\n4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 209
    },
    {
        "title": "最短路径",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有n（n<=50）个城市，保证每个城市与其他城市之间必然有连接，但是两个城市之间会存在多条道路，输入道路连接的两个城市号及道路长度。同时在夜晚，某些道路会封路。请输出在白天和夜晚从城市1到城市n之间的最短路径"
        },
        "inputDescription": {
            "content": "先输入T，表示有T组数据\n再输入n，m，k，n表示有n个城市，表示总共有m条边，k表示在夜晚有k条路封路\n接下来m行，每行输入三个数x,y，z,代表城市x和城市y之间的路径距离\n最后一行k个数，代表晚上关闭的线路序号（线路序号指的是1~m）"
        },
        "outputDescription": {
            "content": "每组数据输出两行，分别代表白天和黑夜，城市1到n的最短路径"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n4 4 1\n1 2 1\n2 3 1\n3 4 1\n1 4 1\n4"
                },
                "output": {
                    "content": "1\n3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 210
    },
    {
        "title": "方块阵",
        "sourceUniversity": "北京邮电大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出一张从原图片中沿横纵向剪切后的图片，判断原图片中n*n（n>=1）矩阵的大小\n（原图片肯定存在该n*n的矩阵，且唯一）,举例说明\n如果原图片是这样：\n......###..\n......###..\n......###..\n...........\n...........\n剪切后的图片可能是：\n1）不变\n......###..\n......###..\n......###..\n...........\n...........\n2）\n##..\n##..\n##..\n....\n....\n所以一个原图片可能对应很多剪切后的图片"
        },
        "inputDescription": {
            "content": "输入剪辑后的图片，长宽不会超过100\n其中‘.’表示空白，'#'表示图片中矩阵的内容"
        },
        "outputDescription": {
            "content": "输出原图片中最小n*n矩阵的大小，即n的值，如果不存在则输出-1"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "##..\n##..\n##..\n....\n...."
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 211
    },
    {
        "title": "Problem B",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "请写一个程序，对于一个m行m列的（1<m<10）的方阵，求其每一行，每一列及主对角线元素之和，最后按照从大到小的顺序依次输出。"
        },
        "inputDescription": {
            "content": "共一组数据，输入的第一行为一个正整数，表示m，接下来的m行，每行m个整数表示方阵元素。"
        },
        "outputDescription": {
            "content": "从大到小排列的一行整数，每个整数后跟一个空格，最后换行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n15 8 -2 6\n31 24 18 71\n-3 -9 27 13\n17 21 38 69"
                },
                "output": {
                    "content": "159 145 144 135 81 60 44 32 28 27"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 212
    },
    {
        "title": "ProblemD",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "已知某二叉树的先序序列和中序序列，编程计算并输出该二叉树的后序序列。"
        },
        "inputDescription": {
            "content": "有多组数据，每组分为两行输入，第一行表示指定二叉树的先序序列，第二行表示该二叉树的中序序列，序列元素均为大写英文字符，表示二叉树的结点。"
        },
        "outputDescription": {
            "content": "对于每组数组，在一行上输出该二叉树的后序序列。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ABDGCEFH\nDGBAECHF"
                },
                "output": {
                    "content": "GDBEHFCA"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 213
    },
    {
        "title": "Problem E",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "请写一个程序，判断给定表达式中的括号是否匹配，表达式中的合法括号为”(“, “)”, “[\", \"]“, “{“, ”}”,这三个括号可以按照任意的次序嵌套使用。"
        },
        "inputDescription": {
            "content": "有多个表达式，输入数据的第一行是表达式的数目，每个表达式占一行。"
        },
        "outputDescription": {
            "content": "对每个表达式，若其中的括号是匹配的，则输出”yes”，否则输出”no”。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n[(d+f)*{}]\n[(2+3))\n()}\n[4(6]7)9"
                },
                "output": {
                    "content": "yes\nno\nno\nno"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 214
    },
    {
        "title": "Problem A",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "请写一个程序，给出指定整数范围【a ,b】内所有的完数，一个数如果恰好等于除它本身外的所有因子之和，这个数就称为完数，例如6是完数，因为6=1+2+3。"
        },
        "inputDescription": {
            "content": "每一组数据为两个正整数，分别表示a和b（1<a<b<10^5）。"
        },
        "outputDescription": {
            "content": "指定范围内的所有完数，每个数占一行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1 100"
                },
                "output": {
                    "content": "6\n28"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 215
    },
    {
        "title": "最大素因子",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对于给定的字符序列，从左至右将所有的数字字符取出拼接成一个无符号整数（字符序列长度小于100，拼接出的整数小于2^31,），计算并输出该整数的最大素因子（如果是素数，则其最大因子为自身）"
        },
        "inputDescription": {
            "content": "有多组数据，输入数据的第一行为一个正整数，表示字符序列的数目，每组数据为一行字符序列。"
        },
        "outputDescription": {
            "content": "对每个字符序列，取出所得整数的最大素因子，若字符序列中没有数字或者找出的整数为0，则输出0，每个整数占一行输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\nsdf0ejg3.f?9f\n?4afd0s&2d79*(g\nabcde"
                },
                "output": {
                    "content": "13\n857\n0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 216
    },
    {
        "title": "跳一跳",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "最近很火的微信游戏跳一跳游戏规则如下：短跳得1分，跌落游戏结束，长跳得2分，并且长跳可连续累加，第一次2分，第二次4分，第三次6分，依次类推，若长中断则重新计分。?\n????现给定0,1,2的组合序列，其中0：跌落 1：短跳成功 2：长跳成功?\n????请你计算玩家当次游戏的合计得分。"
        },
        "inputDescription": {
            "content": "多组数据输入。    \n首先输入一个数字n（n <= 100）代表当前游戏状态变化数，接着输入n个由0,1,2组合的数字，0代表结束。"
        },
        "outputDescription": {
            "content": "输出玩家当次游戏得分。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6\n1 2 2 1 2 0"
                },
                "output": {
                    "content": "10"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 217
    },
    {
        "title": "最长连续公共子序列",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个字符串s1,s2。输出最长连续公共子串长度和最长连续公共子串。"
        },
        "inputDescription": {
            "content": "多组数据输入。\n输入两个字符串s1,s2，长度不大于100，以空格隔开。"
        },
        "outputDescription": {
            "content": "输出最长连续公共子串长度和最长连续公共子串。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "abcdefg qwercdefiok"
                },
                "output": {
                    "content": "4\ncdef"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 218
    },
    {
        "title": "面积涂色问题",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "已知根据矩形的左下角右上角左边可以唯一确定一个矩形位置，给出多个矩形坐标对其网格单元进行涂色。\n????其中重叠的网格区域只涂一次，求涂色网格单元个数。,（提示网格单元为1×1）"
        },
        "inputDescription": {
            "content": "多组数据输入。\n首先输入涂色矩形个数n(n<100)，接着分别输入每个矩形的左下角与右上角坐标，其中0<=x<=100，0<=y<=100，按行分隔。"
        },
        "outputDescription": {
            "content": "输出涂色网格单元个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2\n1 1 4 5\n2 3 5 6"
                },
                "output": {
                    "content": "17"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 219
    },
    {
        "title": "成绩排序",
        "sourceUniversity": "西安电子科技大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一组记录n(n<100)小明各个时期的考试成绩 ，格式为日期+成绩，中间以空格隔开，记录之间分行输入 ，例如,2008/6/3 80,2009/1/1 56,….,其中日期输入要求年份1996-2100 月份1-12 日期1-31,现要求以分数为关键字从大到1小对其进行排序，若分数相同则按日期从小到大排序。"
        },
        "inputDescription": {
            "content": "多组数据输入。\n首先输入记录的数量n，然后在接下来的n行分别输入日期+成绩。其中日期要求为年份1996-2100 月份1-12 日期1-31。"
        },
        "outputDescription": {
            "content": "输出排序后的结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n2017/1/1 95\n2017/6/10 85\n2017/3/2 95\n2017/1/1 65"
                },
                "output": {
                    "content": "2017/1/1 95\n2017/3/2 95\n2017/6/10 85\n2017/1/1 65"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 220
    },
    {
        "title": "旋转方阵",
        "sourceUniversity": "福州大学2018年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "打印出一个旋转方阵,见样例输出。"
        },
        "inputDescription": {
            "content": "输入一个整数n(1 <= n <= 20), n为方阵的行数。"
        },
        "outputDescription": {
            "content": "输出一个大小为n*n的距阵"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5"
                },
                "output": {
                    "content": "1   16  15  14  13\n2   17  24  23  12\n3   18  25  22  11\n4   19  20  21  10\n5   6   7   8   9"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 221
    },
    {
        "title": "杨辉三角形",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入n值，使用递归函数，求杨辉三角形中各个位置上的值。"
        },
        "inputDescription": {
            "content": "一个大于等于2的整型数n"
        },
        "outputDescription": {
            "content": "题目可能有多组不同的测试数据，对于每组输入数据，\n按题目的要求输出相应输入n的杨辉三角形。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "6"
                },
                "output": {
                    "content": "1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 222
    },
    {
        "title": "括号匹配",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "假设表达式中允许包含两种括号:圆括号和方括号。编写一个算法判断表达式中的括号是否正确配对。"
        },
        "inputDescription": {
            "content": "由括号构成的字符串，包含”（“、”）“、”[“和”]“。"
        },
        "outputDescription": {
            "content": "如果匹配输出YES，否则输出NO。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "[([][]())]"
                },
                "output": {
                    "content": "YES"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 223
    },
    {
        "title": "是不是素数 - 1",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数，如果这个数字大于0，则输出1，等于0，输出0，小于0，输出-1."
        },
        "inputDescription": {
            "content": "每次输入1个整数"
        },
        "outputDescription": {
            "content": "输入1或0或-1"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "34"
                },
                "output": {
                    "content": "1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 224
    },
    {
        "title": "是不是素数 - 2",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个正整数，请判断其是否为素数（除了1和本身，没有其他约数的数称为素数）。"
        },
        "inputDescription": {
            "content": "输入数据只包含一个整数N（1<N<10000）"
        },
        "outputDescription": {
            "content": "如果N是素数请输出yes，否则输出no。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5"
                },
                "output": {
                    "content": "yes"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 225
    },
    {
        "title": "是不是素数-3-素数统计",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定若干个正整数，请判断素数的个数。"
        },
        "inputDescription": {
            "content": "输入数据首先包含一个整数N(1<=N<=100)表示数据的个数，然后是N个大于1小于10000的整数。"
        },
        "outputDescription": {
            "content": "请判断并输出给定的N个数中素数的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n3 4 1 9 11"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 226
    },
    {
        "title": "字符串处理 - 统计元音个数",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "统计每个元音字母在字符串中出现的次数。"
        },
        "inputDescription": {
            "content": "每组输入数据是一行长度不超过100的字符串。"
        },
        "outputDescription": {
            "content": "对于每个测试实例输出5行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "my name is ignatius"
                },
                "output": {
                    "content": "a 2\ne 1\ni 3\no 0\nu 1"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 227
    },
    {
        "title": "字符串处理-单词统计",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个字符串，请计算其中一共包含多少个单词（假设连续的无空格字母即为一个单词）？"
        },
        "inputDescription": {
            "content": "输入数据是一个长度为L(0<L<1000)的字符串，其中只包含字母和空格。"
        },
        "outputDescription": {
            "content": "请输出给定字符串一共包含的单词数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "Welcome to NWU"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 228
    },
    {
        "title": "十进制转二进制",
        "sourceUniversity": "兰州大学/西北工业大学2015机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "将一个十进制的数转换为二进制数。"
        },
        "inputDescription": {
            "content": "多组输入数据。\n输入一个十进制的数。\n输入的十进制数不超过10^9。"
        },
        "outputDescription": {
            "content": "输出对应的二进制数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1030"
                },
                "output": {
                    "content": "10000000110"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 229
    },
    {
        "title": "快速排序",
        "sourceUniversity": "西北工业大学",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一组数据的个数，然后输入这组数据，排序后输出结果。要求使用快速排序。"
        },
        "inputDescription": {
            "content": "首先输入数组元素的个数N，然后在接下来的一行里输入数组元素的值，并以空格隔开。"
        },
        "outputDescription": {
            "content": "输出排序后数组的值。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n6 9 2 4 7"
                },
                "output": {
                    "content": "2 4 6 7 9"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 230
    },
    {
        "title": "南京理工-求阶乘",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给出一个数n(1<=n<=13)，求出它的阶乘。"
        },
        "inputDescription": {
            "content": "输入只有一个整数n。"
        },
        "outputDescription": {
            "content": "对于输入的n，求出它的阶乘并输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3"
                },
                "output": {
                    "content": "6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 231
    },
    {
        "title": "南京理工-括号匹配",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "苗苗今天刚刚学会使用括号，不过他分不清小括号，中括号，大括号和尖括号，不知道怎么使用这些括号，请帮助他判断括号使用是否正确。"
        },
        "inputDescription": {
            "content": "输入六行只包含’<’，’(’，’{’，’[’，’>’，’)’，’}’，’]'的字符串（长度不超过10000）"
        },
        "outputDescription": {
            "content": "对应每行输入，如果输入的字符串中的括号正确匹配则输出yes，否则输出no。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "(){}"
                },
                "output": {
                    "content": "yes"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 232
    },
    {
        "title": "南京理工-架线方案",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "电信公司要在多个城市之间架设通信线路，有些城市之间可以架设，而有些由于条件限制不可以架设，可以架设线路的城市之间的架设线路成本为c，现有n个城市，求出使这n个城市互相联通最节省的费用。"
        },
        "inputDescription": {
            "content": "第一行是两个整数n，m(2<=n<=100,1<=m<=n*(n-1)/2)，n表示城市数，m表示可以架设的线路数，接下来m行每行三个整数a，b，c，表示编号为a的城市与编号为b的城市之间架设通信线路的成本为c。"
        },
        "outputDescription": {
            "content": "对于每组测试数据，给出一个整数，表示最节省的费用。(若不存在则输出-1)"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3 3\n0 1 1\n2 1 2\n2 0 1"
                },
                "output": {
                    "content": "2"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 233
    },
    {
        "title": "南京理工-搬箱子",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "华华要给厂里进一批新箱子共n个(n<=500)，编号为1到n，用一个正整数ai(1<=ai<=10000)(1<=i<=n)来表示编号为i的箱子的高度。现在华华要按照编号从小到大的顺序选出m个箱子运到厂房，要确保编号大的箱子比编号小的箱子高。也就是对于任意的i<j有ai<aj，那么m最大可以是多少呢？"
        },
        "inputDescription": {
            "content": "第一行是正整数n，表示n个箱子，第二行a1,a2…an分别表示编号为i的箱子的高度。"
        },
        "outputDescription": {
            "content": "输出华华最多可以搬运的箱子个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "7\n1 7 3 5 9 4 8"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 234
    },
    {
        "title": "南京理工-树的高度",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "树是一种特殊的图结构，有根树是一个有固定根的树。现在给定一棵有根树，编程求出树中所有节点到指定的根节点最远距离。"
        },
        "inputDescription": {
            "content": "第一行是两个整数N，M（1<=N<=10000,1<=M<=N），表示数的顶点数和根节点的编号，接下来N-1行，每行两个整数u,v（1<=u,v<=N），表示编号为u的节点和编号为v的节点间有一条边。"
        },
        "outputDescription": {
            "content": "输出距离根节点最远的点到根的距离。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 5\n1 2\n1 4\n1 5\n2 3"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 235
    },
    {
        "title": "南京理工-女士优先",
        "sourceUniversity": "南京理工大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "午餐时间还未到，饥饿的程序员们早早就在食堂门口排队了。假设现在的队列是这样的：MFM。从左往右，第一位是男程序员（Male），第二位是女程序员（Female）,第三位是一位男程序员。但是男程序员不会让女程序员排在他们后面，于是就会发生这样的情况：只要一位男程序员发现自己后面是一位女程序员，他就会和这位女程序员交换位置，这样的交换需要消耗一秒。当然，在同一秒内可能会有多位男程序员和自己后面的女程序员交换位置。现在，请问最少要消耗多长时间，队伍不再变动。"
        },
        "inputDescription": {
            "content": "输入一个字符串，仅包含‘M’和‘F’两种字母，表示当前的排队情况。（最左边表示队伍头，字符串长度<=100000）"
        },
        "outputDescription": {
            "content": "队伍不再变动的时间。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "MMFF"
                },
                "output": {
                    "content": "3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 236
    },
    {
        "title": "字符串翻转",
        "sourceUniversity": "贵州大学2018机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个字符串，反序输出。"
        },
        "inputDescription": {
            "content": "输入一个字符串在单独的一行，字符串长度<100。"
        },
        "outputDescription": {
            "content": "将字符串反序输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "Guiyang"
                },
                "output": {
                    "content": "gnayiuG"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 237
    },
    {
        "title": "整除",
        "sourceUniversity": "贵州大学2018机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输出100到1000之间能被5和6同时整除的数，输出格式为每10个数为一行。"
        },
        "inputDescription": {
            "content": "无输入"
        },
        "outputDescription": {
            "content": "按题目意思输出，相邻两个数之间用空格隔开（注意每一行末尾没有空格）"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": NaN
                },
                "output": {
                    "content": "（输出题目答案）"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 238
    },
    {
        "title": "0和1的个数",
        "sourceUniversity": "贵州大学2018机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个int型整数，输出这个整数的二进制的0和1的个数。"
        },
        "inputDescription": {
            "content": "输入一个整数n"
        },
        "outputDescription": {
            "content": "输出这个整数的二进制的0和1的个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "15"
                },
                "output": {
                    "content": "count0=28 count1=4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 239
    },
    {
        "title": "随机数",
        "sourceUniversity": "贵州大学2018机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "从1—20之间随机抽取5个数，输出抽取出来的5个数之和与剩余未被抽取的15个数之和的总和。"
        },
        "inputDescription": {
            "content": "无输入"
        },
        "outputDescription": {
            "content": "输出一个答案在单独的一行"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": NaN
                },
                "output": {
                    "content": "（输出你的答案）"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 240
    },
    {
        "title": "排序",
        "sourceUniversity": "贵州大学2018/兰州大学2018年机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入n个数进行排序，要求先按奇偶后按从小到大的顺序排序。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数n，表示总共有多少个数，n<=1000。\n第二行输入n个整数，用空格隔开。"
        },
        "outputDescription": {
            "content": "输出排序之后的结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "8\n1 2 3 4 5 6 7 8"
                },
                "output": {
                    "content": "1 3 5 7 2 4 6 8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 241
    },
    {
        "title": "日期",
        "sourceUniversity": "贵州大学2012机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "今天是2012年4月12日星期四，编写程序，输入今天开始到12月31日之间的任意日期，输出那一天是星期几。例如输入“5（回车）20（回车）”（5月20日），输出应为“Sunday”。"
        },
        "inputDescription": {
            "content": "输入第一行为月份。\n输入第二行为这个月的第几天。"
        },
        "outputDescription": {
            "content": "输入这一天是星期几。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n20"
                },
                "output": {
                    "content": "Sunday"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 242
    },
    {
        "title": "字符移动",
        "sourceUniversity": "贵州大学2012机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个字符串，将其中的数字字符移动到非数字字符之后，并保持数字字符和非数字字符输入时的顺序。例如：输入字符串“ab4f35gr#a6”,输出为“abfgr#a4356”。"
        },
        "inputDescription": {
            "content": "输入一行字符串，长度小于100。"
        },
        "outputDescription": {
            "content": "输出结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "ab4f35gr#a6"
                },
                "output": {
                    "content": "abfgr#a4356"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 243
    },
    {
        "title": "判断素数",
        "sourceUniversity": "贵州大学2014机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数，判断该整数是否为素数，若是，输出该整数，若否，输出大于该整数的第一个素数。（例如，输入为14，输出17，因为17是大于14的第一个素数）"
        },
        "inputDescription": {
            "content": "输入一个整数n，n最大为10000。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "14"
                },
                "output": {
                    "content": "17"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 244
    },
    {
        "title": "加密算法",
        "sourceUniversity": "贵州大学2014机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "编写加密程序，加密规则为：将所有字母转化为该字母后的第三个字母，即A->D、B->E、C->F、......、Y->B、Z->C。小写字母同上，其他字符不做转化。输入任意字符串，输出加密后的结果。,例如：输入\"I love 007\"，输出\"L oryh 007\""
        },
        "inputDescription": {
            "content": "输入一行字符串，长度小于100。"
        },
        "outputDescription": {
            "content": "输出加密之后的结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "I love 007"
                },
                "output": {
                    "content": "L oryh 007"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 245
    },
    {
        "title": "单链表",
        "sourceUniversity": "贵州大学2014机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "设节点定义如下,从键盘输入5个整数，将这些整数插入到一个链表中，并按从小到大次序排列，最后输出这些整数。"
        },
        "inputDescription": {
            "content": "输入5个整数。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 3 4 2 1"
                },
                "output": {
                    "content": "1 2 3 4 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 246
    },
    {
        "title": "字符分类",
        "sourceUniversity": "贵州大学2015机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "从键盘上输入一个字符串，将该字符串分为数字、字母、其他字符三个部分输出。,例如：,输入：Thdad29#@12aH;77,输出：,ThdadaH,291277,#@;"
        },
        "inputDescription": {
            "content": "输入一串字符串，长度不超过100。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "Thdad29#@12aH;77"
                },
                "output": {
                    "content": "ThdadaH\n291277\n#@;"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 247
    },
    {
        "title": "幂次方",
        "sourceUniversity": "贵州大学2015机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "对任意正整数N，求XN%233333的值。,要求运算的时间复杂度为O(logN)。,例如,X30?= X15*X15,X15=X7*X7*X,X7=X3*X3*X,X3=X*X*X,共7次乘法运算完毕。"
        },
        "inputDescription": {
            "content": "输入两个整数X和N，用空格隔开，其中X,N<=10^9。"
        },
        "outputDescription": {
            "content": "输出X^N对233333取模的结果。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2 5"
                },
                "output": {
                    "content": "32"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 248
    },
    {
        "title": "击鼓传花",
        "sourceUniversity": "贵州大学2015机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "有N个小朋友围成一圈玩击鼓传花游戏，将小朋友编号为1~N，从1号开始传花，每次传3个，拿到花的小朋友表演节目后退出，任给N，问最后一个表演的小朋友编号是多少？,例如：5个小朋友，从1号开始传花，第一个表演的是3号，第二个表演的是1号，第三个表演的是5号，第四个表演的是2号，最后一个表演的是4号。（建议用链表实现）"
        },
        "inputDescription": {
            "content": "输入一个整数N，N不超过100。"
        },
        "outputDescription": {
            "content": "输出最后一个表演的小朋友编号在单独的一行。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5"
                },
                "output": {
                    "content": "4"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 249
    },
    {
        "title": "字母频率",
        "sourceUniversity": "贵州大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "从键盘输入一个字符串（可能含有数字、字母、其他可见字符），输出出现频率最高的英文字母及次数，忽略字母的大小写（如大写A和小写a均视为a）。,例如：,输入：There are 10,000 soldiers in the town.,输入：e 5"
        },
        "inputDescription": {
            "content": "输入一行字符串，字符串长度不超过1000。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "There are 10,000 soldiers in the town."
                },
                "output": {
                    "content": "e 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 250
    },
    {
        "title": "最长连续因子",
        "sourceUniversity": "贵州大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数，输出其最长连续因子。,例如,输入：60,输出：2 3 4 5 6,注意：1不算因子"
        },
        "inputDescription": {
            "content": "输入一个整数N，N<=10000。"
        },
        "outputDescription": {
            "content": "输出其最长连续因子，如果有多个最长，输出最小的那个。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "60"
                },
                "output": {
                    "content": "2 3 4 5 6"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 251
    },
    {
        "title": "复数",
        "sourceUniversity": "贵州大学2016机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "复数可以写成A+Bi的形式，其中A是实部，B是虚部。,从键盘输入两个复数，做加法或乘法并输出结果。,例如,输入：4.2 2.5 2 -1.5 +,输出：6.2 1.0,输入：2.5 3 -1 2.4 *,输出：-9.7 3.0"
        },
        "inputDescription": {
            "content": "输入两个复试以及+或*号。"
        },
        "outputDescription": {
            "content": "输出运算结果，并保留1位小数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4.2 2.5 2 -1.5 +"
                },
                "output": {
                    "content": "6.2 1.0"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 252
    },
    {
        "title": "删除最大最小数",
        "sourceUniversity": "贵州大学2017机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你N个整数，要求删除最大和最小的数之后按原顺序输出。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数N，N<=100。\n第二个输入N个整数。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n5 2 4 1 3"
                },
                "output": {
                    "content": "2 4 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 253
    },
    {
        "title": "IP地址",
        "sourceUniversity": "贵州大学2017机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一串字符，判断该字符串是否为点分十进制的IP地址，若是则转换为16进制输出，否则输出“Error”,例如,输入：192.41.6.20,输出：0xC0290614,输入：257.32.23.1,输出：Error"
        },
        "inputDescription": {
            "content": "按题意输入。\n注意：输入可能是任意的一个字符串，比如“abc.bas.fefe.4r4”或者“23.23.11.23.123”\n这都是不合法的IP地址"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "192.41.6.20"
                },
                "output": {
                    "content": "0xC0290614"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 254
    },
    {
        "title": "二元组整数",
        "sourceUniversity": "贵州大学2017机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入N个整数，输出这个整数两两组合且不重复的所有二元组，要求从小到大输出并且用括号的形式。"
        },
        "inputDescription": {
            "content": "第一行输入一个整数N，N<=30。\n第二行输入N个整数。"
        },
        "outputDescription": {
            "content": "按题意输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "3\n1 2 3"
                },
                "output": {
                    "content": "(1,2)\n(1,3)\n(2,1)\n(2,3)\n(3,1)\n(3,2)"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 255
    },
    {
        "title": "链表合并",
        "sourceUniversity": "贵州大学2019机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定两个元素有序（从小到大）的链表，要求将两个链表合并成一个有序（从小到大）链表，"
        },
        "inputDescription": {
            "content": "第一行输入第一个链表的结点数S1，S1<=100。\n第二行输入S1个整数，两两之间用空格隔开。\n第三行输入第二个链表的结点数S2，S2<=100。\n第四行输入S2个整数，两两之间用空格隔开。"
        },
        "outputDescription": {
            "content": "输出合并之后的链表结果，两两之间用空格隔开，末尾没有空格。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4\n2 4 6 8\n3\n3 5 7"
                },
                "output": {
                    "content": "2 3 4 5 6 7 8"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 256
    },
    {
        "title": "删除字符串",
        "sourceUniversity": "贵州大学2019机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你一个字符串S，要求你将字符串中出现的所有\"gzu\"子串删除，输出删除之后的S。"
        },
        "inputDescription": {
            "content": "输入一行字符串S，长度不超过100。"
        },
        "outputDescription": {
            "content": "输出进行删除操作之后的S。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "hahagzzgzuemmmgzu"
                },
                "output": {
                    "content": "hahagzzemmm"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 257
    },
    {
        "title": "删除字符串2",
        "sourceUniversity": "贵州大学2019机试",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给你一个字符串S，要求你将字符串中出现的所有\"gzu\"（不区分大小写）子串删除，输出删除之后的S。,就是说出现“Gzu”、“GZU”、“GZu”、\"gzU\"都可以删除。"
        },
        "inputDescription": {
            "content": "输入一行字符串S，长度不超过100。"
        },
        "outputDescription": {
            "content": "输出进行删除操作之后的S。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "GzzGzukkgzUuu"
                },
                "output": {
                    "content": "Gzzkkuu"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 258
    },
    {
        "title": "这是第几天？",
        "sourceUniversity": "云南大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个年月日的有效日期，输出这一天是今年第几天？"
        },
        "inputDescription": {
            "content": "如题。"
        },
        "outputDescription": {
            "content": "如题。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "2018/1/11"
                },
                "output": {
                    "content": "11"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 259
    },
    {
        "title": "矩阵位置",
        "sourceUniversity": "云南大学机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "给定一个3*4的矩阵如下，请输出给定值在矩阵中的位置。,1 2 3,4 5 6,7 8 9"
        },
        "inputDescription": {
            "content": "多组输入。\n输入一个1到9之间的数，请输出该数在矩阵中是第几行第几列。"
        },
        "outputDescription": {
            "content": "如题输出。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1\n2\n9"
                },
                "output": {
                    "content": "1 1\n1 2\n3 3"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 260
    },
    {
        "title": "最大公约数和最小公倍数",
        "sourceUniversity": "杭州电子科技大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入两个正整数m和n，求其最大公约数和最小公倍数。"
        },
        "inputDescription": {
            "content": "两个整数"
        },
        "outputDescription": {
            "content": "最大公约数，最小公倍数"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5 7"
                },
                "output": {
                    "content": "1 35"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 261
    },
    {
        "title": "字符棱形",
        "sourceUniversity": "杭州电子科技大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "输入一个整数n表示棱形的对角半长度，请你用*把这个棱形画出来。,输入：1,输出：,*,输入：3,输出："
        },
        "inputDescription": {
            "content": "输入一个整数n（n <= 10）。"
        },
        "outputDescription": {
            "content": "按题目要求输出字符棱形。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "1"
                },
                "output": {
                    "content": "*"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 262
    },
    {
        "title": "快速排序",
        "sourceUniversity": "杭州电子科技大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "利用快速排序算法将读入的?N?个数从小到大排序后输出。"
        },
        "inputDescription": {
            "content": "第 1 行为一个正整数 N(N≤10^5)，\n第 2行包含 N 个空格隔开的正整数 ai，为你需要进行排序的数，数据保证了 ai不超过 10^9 。"
        },
        "outputDescription": {
            "content": "将给定的 N 个数从小到大输出，数之间空格隔开，行末换行且无空格。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "5\n4 2 4 5 1"
                },
                "output": {
                    "content": "1 2 4 4 5"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 263
    },
    {
        "title": "上楼梯",
        "sourceUniversity": "杭州电子科技大学2019年机试题",
        "sourceSchool": "",
        "year": "",
        "description": {
            "content": "N阶楼梯上楼问题：一次可以走三阶或两阶或一阶，问有多少种上楼方式。"
        },
        "inputDescription": {
            "content": "输入包括一个整数N,(1<=N<=20)。"
        },
        "outputDescription": {
            "content": "可能有多组测试数据，对于每组数据，\n输出当楼梯阶数是N时的上楼方式个数。"
        },
        "refSolution": [
            {
                "lang": "java",
                "asset": {
                    "content": ""
                }
            },
            {
                "lang": "cpp",
                "asset": {
                    "content": ""
                }
            }
        ],
        "sampleData": [
            {
                "input": {
                    "content": "4"
                },
                "output": {
                    "content": "7"
                }
            }
        ],
        "testData": [
            {
                "input": {
                    "content": ""
                },
                "output": {
                    "content": ""
                }
            }
        ],
        "judge": [
            {
                "name": "default"
            }
        ],
        "defaultRunner": [
            {
                "name": "default"
            }
        ],
        "id": 264
    }
]